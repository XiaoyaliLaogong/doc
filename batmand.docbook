<?xml version="1.0" encoding="UTF-8" ?>
<chapter>
<title>B.A.T.M.A.N. - Layer 3 Meshing</title>

<section>
  <title>Installing from source</title>
  <section>
    <title>Pre-requirements</title>
    <itemizedlist>
      <listitem><para>Compile environment and libraries.</para>
      <orderedlist>
        <listitem><para>gcc</para></listitem>
        <listitem><para>libc6-dev</para></listitem>
        <listitem><para>build-essential</para></listitem>
        <listitem><para>binutils</para></listitem>
        <listitem><para>makedev</para></listitem>
        <listitem><para>GNU make</para></listitem>
        <listitem><para>libpthread</para></listitem>
      </orderedlist></listitem>
      <listitem><para>Download the B.A.T.M.A.N. daemon code from the website
      <ulink url="http://www.open-mesh.net/wiki/Download" /></para></listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Compiling</title>
    <para>All you have to do is untar and make, then you will see the executable
    file called <emphasis>batmand</emphasis>.</para>
    <programlisting><userinput>$ wget \
http://downloads.open-mesh.net/batman/stable/sources/batman/batman-0.3.tar.gz
$ tar xzvf batman-0.3.tar.gz
$ cd batman-0.3
$ make</userinput></programlisting>
    <para>If you want reduce the size of executable file, just strip it by
    executing:</para>
    <programlisting><userinput>$ strip batmand</userinput></programlisting>
    <para>Note that if you want to help us finding a bug in the daemon, please
    don't strip it.</para>
  </section>
  <section>
    <title>Installing</title>
    <para>Copy <emphasis>batmand</emphasis> to a location somewhere in your
    path, for example</para>
    <programlisting><userinput>$ cp batmand /usr/sbin/</userinput></programlisting>
    <para>Or start it right from the directory where you compiled it</para>
    <programlisting><userinput>$ ./batmand</userinput></programlisting>
  </section>
</section>

<section>
  <title>Usage</title>
  <para>If you execute batmand -h or -H, you will see the help page, in the
  following we will explain all parameters and how to work with them in a mesh
  network.</para>
  <section>
    <title>SYNOPSIS</title>
    <cmdsynopsis>
     <command>batmand</command>
     <arg choice="opt"><replaceable>options</replaceable></arg>
     <arg choice="req"><replaceable>interface</replaceable></arg>
     <arg choice="opt" rep="repeat"><replaceable>interface</replaceable></arg>
    </cmdsynopsis>
  </section>
  <section>
    <title>DESCRIPTION</title>
    <para>You can start batmand without specifying options, but you have to
    choose at least one interface batmand runs on.</para>
    <programlisting><userinput>$ batmand eth1</userinput></programlisting>
    <para>If you have more interfaces, then you just add them behind the first.
    </para>
    <programlisting><userinput>$ batmand eth1 eth2 eth3</userinput></programlisting>
    <para>The B.A.T.M.A.N. daemon can also run on alias interfaces. Note that we
    use alias interfaces to separate B.A.T.M.A.N. routing protocol and olsr
    routing protocol.</para>
    <programlisting><userinput>$ batmand eth1:test1 eth2:test2 eth3:test3</userinput></programlisting>
    <para>Note that the B.A.T.M.A.N. daemon will take the ip address and the
    broadcast address from the given interfaces.</para>
    <para>Note also that you have to check whether your essid, channel or wifi
    mode is correct or not.</para>
    <section>
      <title><option>-a</option> add announced network(s)</title>
      <para>The daemon announces the availability of a connection to another
      network. This option can be used multiple times and can be used to add
      networks dynamically while the daemon is running. The parameter has to be
      in the form of ip-address/netmask.</para>
      <para>For example, if you are the node A, and you can connect to
      <emphasis>other network</emphasis>, then you can execute -a to announce
      the gateway.</para>
      <figure>
        <title>Announce A as gateway to B</title>
        <mediaobject>
         <imageobject><imagedata fileref="images/announce_networks.eps" format="EPS" scale="50" /></imageobject>
         <imageobject><imagedata fileref="images/announce_networks.png" format="PNG" /></imageobject>
        </mediaobject>
      </figure>
      <para>If the other nodes in the B.A.T.M.A.N. network want to connect to
      node B after receiving the announce network information form node A, then
      they will know they can use node A as gateway to reach node B. Now, you
      know what a announced network is, but executing this command is wrong:
      </para>
      <programlisting><userinput>$ batmand -a 192.168.100.101 eth1</userinput></programlisting>
      <para>Because you have to specify the netmask parameter and different
      netmask parameters cause different results. Let's make a example:</para>
      <programlisting><userinput>$ batmand -a 192.168.100.101/32 eth1</userinput></programlisting>
      <para>In this case, it means that node A can only connect to node B,
      because your parameter is /32.</para>
      <programlisting><userinput>$ batmand -a 192.168.100.101/24 eth1</userinput></programlisting>
      <para>In this case, it means that node A can connect to the whole
      192.168.100.x network, because your parameter is /24. So, if you use
      different netmask values, then the results are different.</para>
      <figure>
        <title>Two announced networks</title>
        <mediaobject>
         <imageobject><imagedata fileref="images/multiple_announces.eps" format="EPS" scale="50" /></imageobject>
         <imageobject><imagedata fileref="images/multiple_announces.png" format="PNG" /></imageobject>
        </mediaobject>
      </figure>
      <para>Node A can announce more than one network. To announce two networks
      execute the following command:</para>
      <programlisting><userinput>$ batmand -a 192.168.100.101/24 -a 192.168.200.201/24 eth1</userinput></programlisting>
      <para>Note that node A has to have a route to connect the node or network.
      </para>
    </section>
    <section>
      <title><option>-A</option> delete announced network(s)</title>
      <para>Delete networks to the daemons list of available connections to
      another network(s). This option can be used multiple times and can only be
      used while the daemon is running. The parameter has to be in the form of
      ip-address/netmask.</para>
    </section>
    <section>
      <title><option>-b</option> run connection in batch mode</title>
      <para>The debug information are updated after a period of time by default,
      so if you use "-b" it will execute once and then stop.</para>
      <programlisting><userinput>$ batmand eth1
$ batmand -b -c -d 1</userinput></programlisting>
      <para>In this case, it means run debug level 1 once.</para>
      <para>Note that -b can only be used with -c and debug level 1 &amp; 2.
      </para>
    </section>
    <section>
      <title><option>-c</option> connect via unix socket</title>
      <para>The B.A.T.M.A.N. daemon offers a unix socket interface to which you
      can connect. First, you have to create a B.A.T.M.A.N. daemon on your host,
      then use -c to connect to its interface. Note you can create as many
      client sockets as you like. Deploy it without any arguments to get the
      current configuration even if changed at runtime.</para>
      <figure>
        <title>Multiple clients connected to B.A.T.M.A.N. interface</title>
        <mediaobject>
         <imageobject><imagedata fileref="images/multiple_clients.eps" format="EPS" scale="50" /></imageobject>
         <imageobject><imagedata fileref="images/multiple_clients.png" format="PNG" /></imageobject>
        </mediaobject>
      </figure>
      <programlisting><userinput>$ batmand eth1
$ batmand -c -d 1</userinput></programlisting>
      <para>In this case, you ask the daemon to output debug level 1 in your
      current shell. The B.A.T.M.A.N. daemon will update the information after a
      period of time.</para>
      <para>Note that if you use -c flag, then you only can use -d
      to see the debug level.</para>
    </section>
    <section>
      <title><option>-d</option> <replaceable>debug level</replaceable></title>
      <para>The debug level can be set to five values.</para>
      <variablelist>
        <varlistentry>
          <term>0</term>
          <listitem><para>debug disabled (default)</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>1</term>
          <listitem><para>list neighbors</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>2</term>
          <listitem><para>list gateways</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>3</term>
          <listitem><para>observe batmand</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>4</term>
          <listitem><para>observe batmand (very verbose)</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>5</term>
          <listitem><para>memory debug / cpu usage</para></listitem>
        </varlistentry>
      </variablelist>
      <para>Note that debug level 5 can be disabled at compile time.</para>
      <para>For example, you can run in normal start:</para>
      <programlisting><userinput>$ batmand -d 1 eth1</userinput></programlisting>
      <section>
        <title>Level 1</title>
        <para>just lists the neighbors in your B.A.T.M.A.N. network.</para>
        <screen>
Originator      Router (#/128):       Potential routers... [B.A.T.M.A.N. 0.2,
MainIF/IP: eth2 105.131.131.175, UT: 0d 0h 3m]
105.131.83.2    105.131.1.3 (  71):   105.131.1.3 (  71)
105.131.1.2     105.131.1.2 (  52):   105.131.1.2 (  52)
105.131.56.10   105.131.1.4 (  25):   105.131.1.4 (  25),105.131.1.6 ( 15),...
105.131.131.70  105.131.131.70 (121): 105.131.131.70 (121)</screen>
        <itemizedlist>
          <listitem><para>In the first line, we will see the version of the
            B.A.T.M.A.N. daemon, main interface, main IP, and uptime.</para></listitem>
          <listitem><para>In the first column, we can see those IPs which we can
            reach.</para></listitem>
          <listitem><para>In the second column, we can see those IPs which we sent our
            packets to when we want to reach the IP of the first column. The
           number in the parenthesis indicates the link quality of the
           connection and the #/128 shows the maximum number of packets.</para>
          </listitem>
          <listitem><para>In the third column, we can see those IPs which
            are one hop neighbors and rebroadcasted packets from
            the originator. The B.A.T.M.A.N. daemon will choose the
            router with the best link quality from the potential
            router list.</para></listitem>
        </itemizedlist>
        <para>In this case, 105.131.1.2 is a one hop neighbor of
        105.131.131.175, because the 105.131.1.2 is originator,
        router and potential router at the same time. If
        105.131.131.175 wants to exchange data with the
        105.131.83.2, then it will sent its packets to the
        105.131.1.3, because it is the router for this
        destination.</para>
      </section>
      <section>
        <title>Level 2</title>
        <para>just lists gateways in the B.A.T.M.A.N.
        network.</para>
        <screen>
Gateway         Router (#/128)
105.131.83.5    105.131.41.1 ( 57), gw_class 11  ->6 MBit, reliability: 0
105.131.41.5    105.131.41.1 ( 53), gw_class 11  ->6 MBit, reliability: 0
</screen>
        <itemizedlist>
          <listitem><para>In the first column, we can see those IPs which
            are our gateways.</para></listitem>
          <listitem><para>In the second column, we can see those IPs which
            we sent our packets to when we want to reach the IP of
            the first column. The number in the parenthesis
            indicates the link quality of the connection and the 
            #/128 shows the maximum number of packets. The gw_class means
            gateway class of the gateway and 11 -&gt;6 MBit means
            how much bandwidth the gateway owner wants to share.
            The reliability means how good the quality of the
            internet connection is. In this case, 0 means this is the
            best quality. The reliability number will increase if
            the quality is poor.</para></listitem>
        </itemizedlist>
      </section>
      <section>
        <title>Level 3</title>
        <para>has more information about the neighbors, or shows
        the error message when you have an incorrect command. Note
        that if there is no neighbor in the B.A.T.M.A.N. network,
        then it will display nothing.</para>
      </section>
      <section>
        <title>Level 4</title>
        <para>has so many information about the B.A.T.M.A.N.
        network, for example, how many packets you sent, and sent
        to where, or how many packets you got, and received from
        where etc.</para>
      </section>
    </section>
    <section>
      <title><option>-g</option> <replaceable>gateway class</replaceable></title>
      <para>The gateway class is used to tell other nodes in the
      network your available internet bandwidth. Just enter any
      number (optionally followed by "kbit" or "mbit") and the
      daemon will guess your appropriate gateway class. Use "/" to
      seperate the down- and upload rates. You can omit the upload
      rate and batmand will assume an upload of
       <inlineequation>
        <mathphrase>download / 5</mathphrase>
       </inlineequation>.
      </para>
      <itemizedlist>
        <listitem><para>5000</para></listitem>
        <listitem><para>5000kbit</para></listitem>
        <listitem><para>5mbit</para></listitem>
        <listitem><para>5mbit/1024</para></listitem>
        <listitem><para>5mbit/1024kbit</para></listitem>
        <listitem><para>5mbit/1mbit</para></listitem>
      </itemizedlist>
      <para>You only can set the value in a normal start</para>
      <programlisting><userinput>$ batmand -g 5mbit/1024 -d 3 eth1</userinput></programlisting>
      <para>Note that if you use debug level 3, then you will know
      whether you succeed setting the gateway class or not.</para>
    </section>
    <section>
      <title><option>-o</option> <replaceable>originator interval in ms</replaceable></title>
      <para>A node transmits broadcast messages (we call them
      originator message or OGM) to inform the neighboring nodes
      about it's existence. Originator interval is the time to wait
      after sending one message and before sending the next
      message. The default value is 1000 ms (1 second). In a mobile
      network, you may want to detect network changes very quickly,
      so you need to send message very often, for example, use a
      value of 500 ms. In a static network, you can save bandwidth
      by using a higher value. This option is only available in
      daemon mode.</para>
      <programlisting><userinput>$ batmand -o 2000 eth1</userinput></programlisting>
      <para>In this case, batmand will wait 2 second until sending
      the next OGMs.</para>
    </section>
    <section>
      <title><option>-p</option> <replaceable>preferred gateway</replaceable></title>
      <para>Set the internet gateway by yourself.</para>
      <para>Note that this automatically switches your B.A.T.M.A.N.
      daemon to "internet search modus" with "-r 1" unless "-r" is
      given. If the preferred gateway is not found the gateway
      selection will use the current routing class to choose a
      gateway.</para>
      <programlisting><userinput>$ batmand -r 3 -d 3 -p 192.168.1.1 eth1</userinput></programlisting>
      <para>In this case, you set 192.168.1.1 as your preferred
      gateway, so all of your internet packets will be sent to the
      192.168.1.1.</para>
    </section>
    <section>
      <title><option>-r</option> <replaceable>routing class</replaceable></title>
      <para>The routing class can be set to four values - it
      enables "internet search modus". The daemon will choose an
      internet gateway based on certain criteria (unless "-p" is
      specified):</para>
      <variablelist>
        <varlistentry>
          <term>0</term>
          <listitem><para>set no default route (default)</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>1</term>
          <listitem><para>use fast connection</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>2</term>
          <listitem><para>use stable connection</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>3</term>
          <listitem><para>use fast-switch connection</para></listitem>
        </varlistentry>
        <varlistentry>
          <term>XX</term>
          <listitem><para>use late-switch connection</para></listitem>
        </varlistentry>
      </variablelist>
      <section>
        <title>Level 1</title>
        <para>B.A.T.M.A.N tries to find the best available
        connection by watching the uplinks throughput and the link
        quality.</para>
      </section>
      <section>
        <title>Level 2</title>
        <para>B.A.T.M.A.N compares the link quality of the internet
        node and chooses the one with the best connection.</para>
      </section>
      <section>
        <title>Level 3</title>
        <para>B.A.T.M.A.N compares the link quality of the internet
        node and chooses the one with the best connection but
        switches to another gateway as soon as a better connection
        is found.</para>
      </section>
      <section>
        <title>Level XX</title>
        <para>B.A.T.M.A.N compares the link quality of the internet
        node and chooses the one with the best link quality but
        switches to another gateway as soon as this gateway has a
        TQ value which is XX better than the currently selected
        gateway.</para>
        <para>XX ist a number between 3 and 256</para>
        <programlisting><userinput>$ batmand -r 3 -d 3 eth1</userinput></programlisting>
        <para>In this case, the B.A.T.M.A.N. daemon will choose the
        best statistic internet connection for you. Note that if
        you use debug level 3, then you will know whether you
        succeeded setting the routing class or not.</para>
      </section>
    </section>
    <section>
      <title><option>-s</option> <replaceable>visualization server</replaceable></title>
      <para>Since no topology database is computed by the protocol
      an additional solution to create topology graphs has been
      implemented, the vis server. B.A.T.M.A.N. daemons may send
      their local view about their single-hop neighbors to the vis
      server. It collects the information and provides data in a
      format similar to OLSR's topology information output.
      Therefore existing solutions to draw topology graphs
      developed for OLSR can be used to visualize mesh-clouds using
      B.A.T.M.A.N.</para>
    </section>
    <section>
      <title><option>--policy-routing-script</option></title>
      <para>This option disables the policy routing feature of
      batmand - all routing changes are send to the script which
      can make use of this information or not. Firmware and package
      maintainers can use this option to tightly integrate batmand
      into their own routing policies. This option is only
      available in daemon mode.</para>
    </section>
  </section>
</section>

<section>
  <title>Troubleshooting</title>
  <section>
    <title>Why the B.A.T.M.A.N. daemon doesn't reload the setting after I fixed
    the main IP?</title>
    <para>You have to restart the B.A.T.M.A.N. daemon after you modified any
    network configuration, otherwise the B.A.T.M.A.N. daemon won't use the new
    settings.</para>
    <programlisting><userinput>$ killall batmand
$ batmand eth1</userinput></programlisting>
  </section>
  <section>
    <title>Why I can't connect to the Internet after setting the default
    gateway?</title>
    <para>You have to use NAT on your gateway or firewall if you use the -r or
    -p options to set default route.</para>
    <programlisting><userinput>$ iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE</userinput></programlisting>
    <para>Note that you don't set the default route by yourself.</para>
  </section>
</section>

</chapter>