= Google Summer of Code 2011 - Ideas =

== batman-adv ==
=== Categories + Usecases to improve ===
 * Increasing Robustness
 * Improving Mobility / Convergence Speed
 * Improving Indoor performance
 * Improving VoIP group multicast performance
 * Improving nomadic scenarios (circular + chain topology)

=== Specific Tasks ===
==== Dynamic OGM+NDP intervals ====
'''Brief description:''' A batman-adv node shall select originator interval rates according to the dense and dynamics in its closer environment.

Depending on the usage scenario, people can adjust the bandwidth being used for batman-adv's route finding algorithms. Usually people were advised to increase the originator interval if the mesh network is small but needs fast route refresh rates or to decrease it if the mesh network is mostly a static setup with a lot of nodes. It would be great if a batman-adv node could determine the dynamics of the mesh network it is currently participating in on its own so that this option would not have to be administrated from a person anymore. For instance in combination with the 'B.A.T.M.A.N. protocol overhead reduction' project, the local broadcasts could be automatically increased if there are not that many direct neighbors.

==== OGM/NDP Hidden Node Problem Avoidance ====
'''Brief description:''' Implement a suitable solution against hidden node broadcast packet problem.

Especially in indoor scenarios where corners and thick walls are involved, hidden nodes can be a severe problem. Usually activating  RTS/CTS is a common way of solving this problem at least to some degree. However,  RTS/CTS can only be applied for unicast packets. Therefore a node sending a lot of data packets to another one, even with RTS/CTS those packets will interfere with BATMAN's broadcast packets (e.g. NDP packets or OGMs). The effect is, that the transmit quality of a node sending NDP packets which does not see the data packet transmission will greatly decrease.

A suitable solution shall be implemented. This might be based on time slots, multiple interfaces or channel switching and might be implemented within batman-adv or an extra module. See [http://www.open-mesh.org/wiki/bcast-hidden-node here] for a more detailed description of the problem and a solution proposal.

==== !OpenMesh Routing Framework ====
'''Brief description:''' Separate B.A.T.M.A.N. routing algorithm from routing infrastructure in batman-adv.

Many features in batman-adv are routing algorithm independent: Link layer routing, link layer fragmentation, multicast optimizations, NDP, interface bonding. To allow other routing algorithms to use this already well tested infrastructure, the B.A.T.M.A.N. routing algorithm shall be separated more clearly from the routing infrastructure. Ultimately, other routing protocols shall be able to control the kernel space mesh routing infrastructure from userspace.

==== Improve Throughput Bonding ====
'''Brief description:''' Improve performance gain of the throughput bonding mode

The current bonding mode implementation simply sends a data packet in a round robin fashion to the interfaces available for bonding. However, the throughput gain seems to be only about 66%25 instead of doubling the throughput in case of TCP, even if there is no other interference involved. This seems to be the case due to a heavy reordering issue.
Furthermore, the interface with the lowest capacity is a bottleneck for the throughput bonding performance: In case of one interface of 1MBit/s throughput and five more with 2MBit/s throughput, the actual throughput will be just 6x 1MBit/s. However in mixed wireless and wired networks, it might be desirable to accumulate the throughput of a Gigabit-Ethernet interface and a 802.11g interface.
Therefore checks for links' capacities (detect full queues etc.) to gain performance of IF1 + IF2 + ... instead of min(IF1, IF2, ...) shall be implemented. If an interface is busy, it shall be skipped in this round robin cycle. Furthermore simple per hop pre-ordering on batman-adv's layer shall be implemented to increase the TCP performance.

=== Further Tasks ===

 * Improve broadcast data performance (dynamic number of rebroadcast, MPR like optimizations, ...)
 * (link layer?) FEC, ARQ module (maybe create a separate kernel module, port also the link layer fragmentation to this module so other protocols might use it?)
 * Dead-node fast path switching
 * Link quality / Packet delivery ratio measurement improvements
  -> weighted/exponential moving average
  -> testing / performance measurements of / improving NDP, find and improve "performance bottlenecks"
 * Multicast Optimization Algorithm enhancements
  -> implement reactive tracker packet mode
  -> decrease latency of reactive tracker packet mode: attaching small data packets to tracker packet, if MTU fits (otherwise broadcast) in react. mode? ...?
  -> ultimately, make proactive tracker mode obsolete
  -> optimize number of rebroadcasts (we have the info about the number of next hop nodes)
  -> don't send tracker packets if <= 1 destination or > 50%25 of all nodes are destinations
  -> Enhance HNA, host network announcements, improvement scheme to also support MCAs, multicast announcements
  -> ...
 * Implement a suitable congestion avoidance mechanism for batman's control packets (different queues for control and data packets, time slots, ...)
 * Unit test infrastructure (Implementation centric tesitng, simulator using Linux VMs to test different topologies or administrative changes? Code centric unit tests ...)
 * IPv6 stateless autoconf GW solution (playing with TTL of broadcast packets, use router preference option in RA (RFC4191)?)
 * Further HNA roaming improvements
 * Network Coding?
 * Packet signing: Add a signing mechanism to identify OGM's sender and drop malicious nodes
 * reduce latency by ARP buffering ?
 * built-in bandwidth test tool ?

== batctl ==
 * Enhance live link quality monitoring: bisect -> dot-files -> graphs -> to (live) video? (+ adding horst tool information, wifi interface stats?)
 * Add further info to batman-adv vis servers/clients for debugging networks
 * bisect, include initial state
 * live vis in map (HTML5 + Openstreetmap?)

== misc ==
 * multiple interface support in Mesh 3D
 * ap51flash GUI; ap51flash multi-flash on single interface
 * !Android/Maemo/Meego porting + _maintenance_!
 * Cooperative work with Pidgin guys? (video/audio/file-transfer/bonjour in pidgin and improving its + batman-adv's combined performance in a mesh network?)