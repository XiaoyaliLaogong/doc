h1. Multi-link Optimizations

batman-adv is able to work on different interfaces - multiple WiFi interfaces, but also Ethernet interfaces. If two or more nodes are interconnected through batman-adv on multiple interfaces, they may leverage some features to increase throughput, which are explained here.

For more technical information, please see our [[Network-wide-multi-link-optimization|technical network wide multi-link documentation]]

h2. Interface alternating

With Interface alternating, batman-adv forwards frames on a different interface than on which the frame was received. The purpose of this alternation is to reduce interference (we can either send or receive on a WiFi interface at one time) and to balance the network load better on the available interfaces, and eventually increases throughput. The mechanism is illustrated below for a chain of nodes with two interfaces.

!alternation_chain.dia.jpg!

Interface alternating is performed by considering the interface where a packet has been received, and selecting the best neighbor of the available outgoing interfaces. On half-duplex interfaces like WiFi interfaces, a penalty is applied on the metric, and therefore forwarding decisions where sending and receiving interfaces are the same are considered worse. This feature is enabled by default and does not have to be enabled manually.

h2. Interface bonding

When multiple paths on different interfaces with similar quality are available, batman-adv may distribute the frames to be sent over these available paths. The individual frames are sent over the paths in a round robin fashion as illustrated below. Using this technique, the throughput may be increased by the number of interfaces involved in the bonding. In practical tests over two WiFi links, we have seen more than 50%25 of throughput gain.

!bonding_roundrobin.dia.jpg!

However, if the paths have different speeds (B.A.T.M.A.N IV won't detect that), the throughput may even decrease due to the slower link slowing down the whole bonding. Therefore, this feature must be explicitly enabled. One may enable it for certain nodes in a known environment, the same setting does not have to be applied mesh wide.

To enable bonding, use batctl:

<pre>
batctl bonding enable
</pre>

h2. Throughput gain

NOTE: these are old graphs showing throughput gain from the previous bonding implementation. However the new mechanism is similar enough to keep this graph for reference until new measurements have been performed:

At the [[open-mesh:2010-06-13-wbm2010-bracciano|WirelessBattleMesh v3]] we performed throughput tests to measure the gain of the various modes:

!bonding_2hops.png!

This graph shows a 3 node setup each with 2 802.11abg wifi interfaces connected to the mesh network (1x 2.4GHz and 1x 5.8GHz). As you can see the alternating mode is able to maintain the performance. The old default behavior sometimes manages to maintain a similar level of performance but is rather unstable.
