h1. TVLV


This document describes in detail the TVLV format, the TVLV API and contains a list of TVLV definitions for reference. Be sure to have read the [[open-mesh:2012-09-xx-GSoC-2012-Spyros-Gasteros-Final-Report|TVLV introduction]] if you don't understand the scope of this document.

{{TOC}}


h2. TVLV format

A typical TVLV container is composed of the following fields:
* Length flag: indicates whether the length field is 1byte or 2 bytes wide
* TVLV type: TVLV type identifying the content of value (see below for the list of types)
* Version: version number of the TVLV type
* Length: length of the value field in bytes
* Value: the actual data of this TVLV

The short length field limits the size of the TVLV value to 255bytes which is sufficient for most cases. If a larger payload is to be transmitted the "long TVLV" flag has to be set (extending the maximum length to 65535bytes). On the other hand, certain TVLV containers have no payload at all (with a the length field set to zero and no value field) which can be used to let the mesh know about a feature's availability.


h3. Short TVLV

<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |S| TVLV Type |    Version    |    Length     |  Value
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>

h3. Long TVLV

<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |L| TVLV Type |    Version    |             Length              | 
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                           Value 
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>


h2. TVLV API


h3. OGM TVLV transmit

To periodically transmit a TVLV container with every Originator Message (OGM) an ogm_register() call has to be performed. The function takes the TVLV type, version,  length and value as argument and internally stores this information. The aforementioned length handling, the periodic scheduling, etc happens transparently to the caller. The ogm_register() call also takes care of updates to an existing TVLV type + version container.
 
<pre>
void batadv_tvlv_ogm_register(struct batadv_priv *bat_priv, uint8_t type,
			                  uint8_t version, uint16_t length,
			                  uint8_t *value);

</pre>

To stop transmitting a TVLV type + version container the unregister() function has to be called.

<pre>void batadv_tvlv_ogm_unregister(struct batadv_priv *bat_priv, uint8_t type,
							    uint8_t version);</pre>

h3. Handle incoming TVLVs

The TVLV API processes incoming packets and parses their TVLV containers. If a TVLV container is found and a handler function was installed for this specific TVLV type, the handler is called with the TVLV data as argument along with a couple of other useful values. To install such a handler the handler_register() function has to be called: 

<pre>
void batadv_tvlv_handler_register(struct batadv_priv *bat_priv,
				                  uint8_t type, uint8_t flags,
				                  void (*ptr)(struct batadv_priv *bat_priv,
					                          struct batadv_orig_node *orig,
					                          uint8_t handler_flags,
					                          uint8_t version,
					                          uint16_t length,
					                          uint8_t *value));
</pre>

To remove a handler a handler_unregister() is provided:
<pre>
void batadv_tvlv_handler_unregister(struct batadv_priv *bat_priv,uint8_t type);
</pre>

Upon registering a handler it is possible to pass a couple of flags to tweak the handler API behavior. For instance, some features need to be also called if a certain TVLV container was not found in an OGM to learn when the peer node has switched it off. The following flags are available:

 * TVLV_OGM_CALL_IFNFOUND: If the TVLV type has not been found, call this handler anyway when the OGM parsing has been completed. In this case the length argument will be 0 and the value will be NULL.

Available handler_flags:

 * TVLV_OGM_FOUND: tells the callback whether the tvlv has been found or not. This is needed to differentiate an invocation triggered by TVLV_OGM_CALL_IFNFOUND from the case of a "boolean tvlv" (a particulare case where the tvlv carry no value)

h2. TVLV definitions


h3. Gateway announcement

 * tvlv type: 0x01
 * function: Each batman-adv gateway server announces it's available internet connection speed, so that batman-adv gateway clients can select their preferable server.
 * purpose: Every node keeps a list of batman-adv gateways in the mesh to later the preferred gateway. 
 * length: 1 byte gateway flags (see batman_ogm_packet->gw_flags)
 * definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TVLV 0x01   |    Version    |    Length     |    GW Flags   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>


h3. DAT (Distributed ARP Table)

 * tvlv type: 0x02
 * function: D.A.T. is a DHT based global ARP cache
 * purpose: the DAT component will only query other DAT-enabled nodes
 * length: 0 (This is a boolean telling that this node caches ARP requests / replies for the mesh.)
 * definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TVLV 0x02   |    Version    |    Length     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>


h3. Vis server

 * tvlv type: 0x??
 * function: The vis server allow to dump a complete network graph of the mesh network. To do this, vis clients send their neighbor and tt data to vis servers. The vis servers then share the collected data between each other.
 * purpose: Clients may send their vis data to the server if the vis TLV is present.
 * length: 0 byte
 * definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TVLV 0x??   |    Version    |    Length     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>


h3. Translation table / TT messages

 * tvlv type: 0x03
 * function: Node local clients advertisement mechanism. This particular component needs some parameters that are were carried by the OGM. Now these fields can be encapsulated in the tvlv (see below to understand what fields I'm talking about).
 * purpose: nodes need to exchange TranslationTable state information
 * length: variable (it depends on the number of changes that the tvlv is carrying). Fixed tvlv fields:
 ** batman_ogm_packet->ttvn (1Byte)
 ** batman_ogm_packet->tt_crc (2Bytes)
 * definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TVLV 0x03   |    Version     |    Length                    | 
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |     TTVN      |             TT CRC            |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>


h3. Catwoman (network coding)

 * tvlv type: to be decided upon merge into the master branch
 * function: Nodes compiled with support for network and has enabled network coding, announces this, so that other nodes do not send coded packets to nodes unable to understand such.
 * purpose: network encoded packets will only sent to nodes that have network coding enabled
 * length: 0 (This is a boolean telling that this node knows how to decode nc-packets.)
 * definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TVLV TBD    |    Version    |    Length     |  
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>


h2. TVLV definitions (proposal)

h3. Vis information packet

 * tvlv type: 0x??
 * function: The vis server allow to dump a complete network graph of the mesh network. To do this, vis clients send their neighbor and tt data to vis servers. The vis servers then share the collected data between each other.
 * purpose: information packet are sent from clients to servers or from servers to servers to propagate neighbor/client information. The packets are NOT attached to OGMs, but are sent via unicast instead
 * discussion: we may want to move target originator (maybe others?) in general headers so that non-vis-aware nodes can forward the packets.
 * length: variable - 23 byte + #entries * 7 byte
 * definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TVLV 0x??   |    Version    |    Length     |   VIS_TYPE    |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Sequence Number                                             |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Vis Originator                                              |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Vis Originator (cont'd)     |    Target Originator          |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Target Originator (cont'd)                                  |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Sender Originator                                           |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Sender Originator (cont'd)  |    ... (entries) ...          |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>
 * entry definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   SRC MAC                                                     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   SRC MAC (cont'd)            |   DST MAC                     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   DST MAC (cont'd)                                            |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Quality     |
 +-+-+-+-+-+-+-+-+

</pre>


h3. Multicast capability

 * tvlv type: to be decided upon merge into the master branch
 * function: The current (unfinished) implementation optimizes for sparse multicast networks, with groups (much) smaller than half the nodes of the network. It first sends out tracker packets to mark the multicast tree for the following stream.
 * purpose: TBD. We could use a TLV to announce the Multicast MAC addresses we want to listen to (similar to the early TT mechanism).
 * length: TBD
 * note: should not be considered for now, we can pick it up again as soon as it gets some love from a developer.