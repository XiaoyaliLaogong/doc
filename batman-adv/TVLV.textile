h1. BackwardsCompatibility

Everything on this page is a suggestion and a work in progress therefore open to discussion and change.

h2. Intro

Right now batman does not have any  real backwards compatibility. We could implement real backward compatibility through the use of IEs (information elements) and more specifically TLVs (type/length/value) elements.

First the closest thing I found in wireless information elements is the wifi ones. For everyone who is not aware of the basics, here is a "link":http://etutorials.org/Networking/802.11+security.+wi-fi+protected+access+and+802.11i/Part+II+The+Design+of+Wi-Fi+Security/Chapter+13.+Wi-Fi+LAN+Coordination+ESS+and+IBSS/WPA+RSN+Information+Element/ with a brief and general/abstract description


h2.  In-Kernel functionality

Most systems use tlvs for a variety of things (from Alsa that uses unencoded tlvs to set the sound levels to the wifi)

There is already functionality for encoding/decoding 
#CIFS http://lxr.linux.no/#linux+v3.3.5/fs/cifs/asn1.c#L2
#nat_snmp_basic http://lxr.linux.no/#linux+v3.3.5/net/ipv4/netfilter/nf_nat_snmp_basic.c#L62


h2.  TLV concept

Since the number of different messages transmitted is relatively low the following struct should be enough to contain the information of each message

          struct tlv {
          u8 type;
          u8 version;/*see below*/
          u8 length;
          u8 value[255];
           };
/*i'm not yet sure about the u8 in the value field, maybe it should be u32*/
the type should be:

        typedef enum {

         A_TLV   = 0x00,
         B_TLV   = 0x01,
         C_TLV   = 0x02,
         D_TLV   = 0x03,
         E_TLV   = 0x04,
         G_TLV   = 0X05, 
         F_TLV   = 0X06,
         .
         .
         .
         .
         X_TLV	 = 0XFF,  
     } bat_tlv;

where each hex code represents the kind of message we are waiting to parse


the whole thing gets serialized and transmited the receiver deserializes
the message and passes it to the appropriate method depending on the type value

(i have to work on the serialization though in the user space its kinda tricky, maybe the kernel has something)

h2. Modifications to the TLV structure

bat-tlvs will be as follows
<pre>
+--------------------------+
+        Type                +
+--------------------------+
+        Version            +
+--------------------------+
+        Length            +
+--------------------------+
+        Value               +
+--------------------------+

</pre>

h2. Tlv types/features to be tlv-ed:

* Bla(bridge loop avoidance)
* Dat(distributed arp table)
* Catwoman(network encoding)
* Gateway announcements
* Translation table
* Vis server
* Multicast capability
* TT messages


h2. Things in the ogm packet to be tlv'd

the two flag fields (flags and the gateway flags)
and the 3 tt fields

h2. reasons for not tlv-ing the other fields:

	struct batman_header header;
	
the header already has version identifiers and packet type identifier so putting it in a tlv is useless overhead

	__be32   seqno; 

just an int(maybe) does not describe anything new(?)

	uint8_t  orig[ETH_ALEN];

as I understand it describes a mac address so it wont cange in the future

	uint8_t  prev_sender[ETH_ALEN];

same as above

	uint8_t  tq;

same as above(?)
	
h2. Wrapp-up


So the  ogm packet gets as following:
<pre>


+--------------------------------------------------+
+           current  header                        +
+--------------------------------------------------+

		/*FLAGS TLV*/
+  type + Version +  length  + flags               +


+--------------------------------------------------+
+             seqno                                +
+--------------------------------------------------+
+             orig                                 +
+--------------------------------------------------+
+             prev_sender                          +
+--------------------------------------------------+

		/*GATEWAY FLAGS TLV*/
+type +Version  +  length  +  gw_flags             +

+--------------------------------------------------+
+              tq;                                 +
+--------------------------------------------------+

		/*TT TLV*/
+  type  +  Version  +  length  +  tt_num_changes  +
	   ttvn  +     tt_crc                      +

+--------------------------------------------------+
</pre>




/*2do: add the rest of the packets */