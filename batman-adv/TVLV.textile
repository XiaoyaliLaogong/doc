h1. BackwardsCompatibility

Repository: http://git.open-mesh.org/?p=northpole/batman-adv.git
branch:http://git.open-mesh.org/?p=northpole/batman-adv.git;a=shortlog;h=refs/heads/tvlvs



Everything on this page is a suggestion and a work in progress therefore open to discussion and change.

h2. Intro

Right now batman does not have any  real backwards compatibility. We could implement real backward compatibility through the use of IEs (information elements) and more specifically TLVs (type/length/value) elements.

First the closest thing I found in wireless information elements is the wifi ones. For everyone who is not aware of the basics, here is a "link":http://etutorials.org/Networking/802.11+security.+wi-fi+protected+access+and+802.11i/Part+II+The+Design+of+Wi-Fi+Security/Chapter+13.+Wi-Fi+LAN+Coordination+ESS+and+IBSS/WPA+RSN+Information+Element/ with a brief and general/abstract description


h2.  In-Kernel functionality

Most systems use tlvs for a variety of things (from Alsa that uses unencoded tlvs to set the sound levels to the wifi)

There is already functionality for encoding/decoding 
#CIFS http://lxr.linux.no/#linux+v3.3.5/fs/cifs/asn1.c#L2
#nat_snmp_basic http://lxr.linux.no/#linux+v3.3.5/net/ipv4/netfilter/nf_nat_snmp_basic.c#L62


h2.  TVLV concept

Each OGM shall contain a set of tvlv (type-version-length-value) containers to announce the support of a feature set. The standard TLV concept has been enriched by a version field as it can be safely assumed features evolve over time. Every feature is assigned a unique tvlv type as identifier (see below). 

Sample tvlv definition:

<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TVLV Type   |    Version    |    Length     |     Value     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>

+Note+: A tvlv with a length of zero and no value is allowed to simply announce the support of a feature.

Due to the individual requirements of every feature a list of existing feature tvlv follows.

h3. Gateway announcement

 * tvlv type: 0x01
 * function: Each batman-adv gateway server announces it's available internet connection speed, so that batman-adv gateway clients can select their preferable server.
 * purpose: Every node keeps a list of batman-adv gateways in the mesh to later the preferred gateway. 
 * length: 1 byte gateway flags (see batman_ogm_packet->gw_flags)
 * definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TVLV 0x01   |    Version    |    Length     |    GW Flags   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>


h3. DAT (Distributed ARP Table)

 * tvlv type: 0x02
 * function: D.A.T. is a DHT based global ARP cache
 * purpose: the DAT component will only query other DAT-enabled nodes
 * length: 0 (This is a boolean telling that this node caches ARP requests / replies for the mesh.)
 * definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TVLV 0x02   |    Version    |    Length     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>


h3. Translation table / TT messages

 * tvlv type: 0x03
 * function: Node local clients advertisement mechanism. This particular component needs some parameters that are were carried by the OGM. Now these fields can be encapsulated in the tvlv (see below to understand what fields I'm talking about).
 * purpose: nodes need to exchange TranslationTable state information
 * length: variable (it depends on the number of changes that the tvlv is carrying). Fixed tvlv fields:
 ** batman_ogm_packet->ttvn (1Byte)
 ** batman_ogm_packet->tt_crc (2Bytes)
 * definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TVLV 0x03   |    Version    |    Length     |     TTVN      | 
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |             TT CRC            |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>

h3. Bla(bridge loop avoidance)

 * tvlv type: 0x??
 * function: Bridge Loop Avoidance is used to avoid loops between a backbone network (e.g. LAN) and the mesh. More documentation at the wiki at: [[Bridge-loop-avoidance-II]]
 * purpose: TBD - so far, no compatibility has been defined between nodes which support BLA and nodes which don't.
 * length: 0 byte
 * note: needs more discussion whether we really need that.

h3. Vis server

 * tvlv type: 0x??
 * function: The vis server allow to dump a complete network graph of the mesh network. To do this, vis clients send their neighbor and tt data to vis servers. The vis servers then share the collected data between each other.
 * purpose: Clients may send their vis data to the server if the vis TLV is present.
 * length: 0 byte
 * definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TVLV 0x??   |    Version    |    Length     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>

h3. Vis information packet (PROPOSAL)

 * tvlv type: 0x??
 * function: The vis server allow to dump a complete network graph of the mesh network. To do this, vis clients send their neighbor and tt data to vis servers. The vis servers then share the collected data between each other.
 * purpose: information packet are sent from clients to servers or from servers to servers to propagate neighbor/client information. The packets are NOT attached to OGMs, but are sent via unicast instead
 * discussion: we may want to move target originator (maybe others?) in general headers so that non-vis-aware nodes can forward the packets.
 * length: variable - 23 byte + #entries * 7 byte
 * definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TVLV 0x??   |    Version    |    Length     |   VIS_TYPE    |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Sequence Number                                             |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Vis Originator                                              |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Vis Originator (cont'd)     |    Target Originator          |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Target Originator (cont'd)                                  |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Sender Originator                                           |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Sender Originator (cont'd)  |    ... (entries) ...          |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>
 * entry definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   SRC MAC                                                     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   SRC MAC (cont'd)            |   DST MAC                     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   DST MAC (cont'd)                                            |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Quality     |
 +-+-+-+-+-+-+-+-+

</pre>


h3. Catwoman (network coding)

 * tvlv type: to be decided upon merge into the master branch
 * function: Nodes compiled with support for network and has enabled network coding, announces this, so that other nodes do not send coded packets to nodes unable to understand such.
 * purpose: network encoded packets will only sent to nodes that have network coding enabled
 * length: 0 (This is a boolean telling that this node knows how to decode nc-packets.)
 * definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TVLV TBD    |    Version    |    Length     |  
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>

h3. Multicast capability (TODO => Simon / Edo)

 * tvlv type: to be decided upon merge into the master branch
 * function: The current (unfinished) implementation optimizes for sparse multicast networks, with groups (much) smaller than half the nodes of the network. It first sends out tracker packets to mark the multicast tree for the following stream.
 * purpose: TBD. We could use a TLV to announce the Multicast MAC addresses we want to listen to (similar to the early TT mechanism).
 * length: TBD
 * note: should not be considered for now, we can pick it up again as soon as it gets some love from a developer.

===================================================

TODO

Currently Doing:

* Building an emulated testing environment and familiriasing myself with the tools needed. -- Done (somewhat, stays on the currently doing list since its a constant work in progress)
* first user: gateway settings                                                              -- done
* apped all existing tvlvs from the list to the ogm                             --done
* function names                                                                                 --see questions bellow
* group re-occuring tasks in separate functions (like tvlv_find())    --w(h)ip
* register/unregister gateway handler                                              --done
* parse incoming tvlv                                                                          --done
*The Gateway callback should call batadv_gw_node_update()	--done

*  No more warnings                                                                            --done
*  Tvlv handler list                                                                                 --done
*  The Gateway callback should call batadv_gw_node_update()	--done
*  Add the switch case to sysfs.c -> batadv_store_gw_mode() 	--done
*  Fix identation                                                                                     --done
*  Reduce easily reducable patches                                                     --w(h)ip  --schedule it for next week(?)
*  fix merge conflicts                                                                            --w(h)ip  --schedule it for next week(?)

Future Tasks:
  
 The order is roughly as follows:
* Gateway packets (w.i.p.)
* Dat packets
* Vis
* ....to be decided




h2. MidTerm 

# output of the make command on the commit messaged: "no warnings commit": http://pastebin.com/iRGWgtmn
# output of checkpatch.pl --strict --no-tree -file batman-adv/*.c: complaints only about an over 80 chars line (see questions)
the same for *.h (same function definition)
# I modified the test_comments function a bit to print the ouput to files, checkComments.sh: http://pastebin.com/NcQ9NFJf 
the log* files are empty when run with the latest style commit
# test_brackets.sh: a script that iterates over all the .c and .h files in the build-dir and for each calls  bracket_align.py 
it came clean

h2. Questions

#  The find_unused symbols prints all of my function names but how can i know which symbol is the unused one?
#  Is there somewhere any rules for function names? (find_wrong_namespace.sh returns all of my functions' names)
# I cloned git://git.open-mesh.org/build_test.git but it didnt bring the sparse, cppcheck folders its 6 am  and i'm probably doing something wrong but please enlighten me


h3. MidTerm Interview

* The midterm of your GSoC project has been reached. Can you describe in a
 few sentences what you have achieved so far and which tasks remain for the
 second half of this GSoC ?

So far I have made a working prototype for the project which sends the gateway announcement tvlv.
Now I have to polish the existing code, do some bug-fixes (thank you for you remarks everyone) and finally include the right function calls in various places in the code so as tvlvs are part of the protocol.

  * Looking at the past weeks what have been your greatest challenges and how
 did you master them ?

I had some trouble making myself comfortable with the linux kernel coding style and learn how to interpret the kernel panic logs.

  * What has been the most exciting experience relating to your GSoC project so
 far (e.g. mastering a technique, learning new approaches, successes, etc) ?

Pretty much everything about gsoc has been exciting but if I have to pick just one aspect I choose the part that I'm working with others on a code-base written by them.

  * Could the batman-adv organisation (website, community, mentors, individual
 supporters, etc) have done anything different to facilitate your life as GSoC
 student ? Was there something you considered too complicated or even scary ?


No, the organisation has already provided more than enough for me.

  * Do you have any advice, words of wisdom or valuable feedback you'd like to
 share with future batman-adv GSoC students (with regards to expectation,
 preparation and time consumption for example) ?

Start early, never stop, familiriaze yourself with everything first, listen to the mentors.




h1. Todo after midterm

I put here the todo list as it is after the mentors' remarks as well as my own todo's

1. fix the warnings you see with "make C=2"

almost done (there are some warning about unused functions but these are the debug functions so they are used in the debug version )
 
2. -constantly check with checkpatch.pl --script if the commit you are creating are correctly formatted or not.-

<pre>
./checkpatch.pl --strict --no-tree --ignore COMPLEX_MACRO --strict --file batman-adv/*.h|less
./checkpatch.pl --strict --no-tree --ignore COMPLEX_MACRO --strict --file batman-adv/*.c|less
 </pre>
 the above comes empty
 
3. -pay attention to the indentation (of parenthesis, parameters, whatever).-

 I reviewed the code and fixed it
 
4. -when you declare a new variable don't add a new line between it and the  previous ones, but add a newline after it so to have a clear separation  between variable declarations and the rest of the code.-


5. -multiline comments should be of the form:
  /* blabla
   * lol
   */
  so you need a * at the beginning of each line and end with a */ only.-

found one "illegal comment and fixed it"


6. -pay attention to what you did during your last rebase :) you accidentally removed the last fix introduced by Simon for batadv_bla_rx()
  and the is_bcast parameter.-
 
done(?) http://pastebin.com/YfEPR6kU
 
7. -look at the invocation of tvlv_register() in gateway_common.c: you do not need
  to have a newline for each param, you need a new line only if adding another
  param would make the line longer than 80 chars. I saw you doing this several
  times in the code.-

8. - try to avoid adding or deleting blank line alone -

i'll fix it in the rebase
 
9. - what does this comment mean: /*Gateway tvlvs i need a bat_priv aware function
  for this */ ? (it is in main.c in batadv_recv_handler_init()). I thought you
  solved this problem.-

leftover comment, i removed it
 
10.  at some point.....you'll have to convert all your pr_warn in batadv_dbg



 
11. -NEVER write code on the same line of a label like "end: return;". Label must be alone-

ok, i think i fixed it everywhere
 
12. - when you have operations like a+b it must be a + b. If the statement is too
  long because 'a' is something very long, try to use another var like:
  tmp = very_long_long_statement;
  tmp + b-

 
13. -when you define an enum, please add a coma also to the last element in the list.-

14.- why do we still have this: BATADV_TVLV         = 0x09 ?-

leftover,removed

15.  -looking at this function tvlv_handler_unregister(), you should use kfree_rcu() instead of kfree()-

16. -you still have a lot of sizeof(uint8_t) in your code - please remove them-

17 -in main.c/tvlv_process(), you move the iterator outside of the loop.-

stupid mistake, fixed

18. -your tree does not seem to be rebased on master (again)?-

rebased, sorry

19. test the prototype with long lists of tvlvs and handler functions and also with weird tvlv values

20. ask someone to increase the wiki logout timeout (please?)