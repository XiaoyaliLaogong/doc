h1. Echo Location Protocol (ELP)

!http://upload.wikimedia.org/wikipedia/commons/e/e1/Animal_echolocation.svg!:http://en.wikipedia.org/wiki/File:Animal_echolocation.svg
_Image Source_: "Petteri Aimonen, Wikimedia Commons":http://en.wikipedia.org/wiki/File:Animal_echolocation.svg

----

The B.A.T.M.A.N. protocol originally only used a single message type (called OGM) to determine the link qualities to the direct neighbors and spreading these link quality information through the whole mesh. This procedure is summarized on the [[open-mesh:BATMANConcept|BATMAN concept page]] and explained in details in "the RFC draft":http://tools.ietf.org/html/draft-wunderlich-openmesh-manet-routing-00 published in 2008.

This approach was chosen for its simplicity during the protocol design phase and the implementation. However, it also bears some drawbacks: 
* Wireless interfaces usually come with some packet loss, therefore a higher broadcast rate is desirable to allow a fast reaction on flaky connections. Other interfaces of the same host might be connected to Ethernet LANs / VPNs / etc which rarely exhibit packet loss would benefit from a lower broadcast rate to reduce overhead.
* It generally is more desirable to detect local link quality changes at a faster rate than propagating all these changes through the entire mesh (the far end of the mesh does not need to care about local link quality changes that much). Other optimizations strategies, like reducing overhead, might be possible if OGMs weren't used for all tasks in the mesh at the same time. 

As a result detecting local link qualities shall be handled by an independent message type, ELP, whereas the OGM message type remains responsible for flooding the mesh with these link quality information and determining the overall path transmit qualities.


h2. 1. Definitions

* Node - A mesh router which utilizes the B.A.T.M.A.N. protocol as specified in this document on at least one network interface.
* originator - A node broadcasting its own OGMs (see [[OGM]] for details) that is therefore addressable within the mesh network routing layer. It is uniquely identifiable by its originator address. [[batman-adv:Doc-overview|B.A.T.M.A.N.-Advanced]] uses the MAC address of its primary hard interface.
* hard-interface - Network interface utilized by B.A.T.M.A.N. for its own Ethernet frames. 
* sliding window - Sequence numbers are recorded in dedicated sliding windows until they are considered out-ofÂ­-range. Thus, such a sliding window always contains the set of recently received sequence numbers. The amount of sequence numbers recorded in the sliding window is used as a metric for the quality of detected links and paths.
* Neighbor: An ELP sender within one hop distance (note, this is defined differently for the OGM protocol)

h2. 2. Conceptual Data Structures

h3. 2.1. Neighbor List

* Neighbor Address: The Ethernet source address of the received ELP message.
* Originator Address: The originator address of the node.
* Packet Count Window:
* Current Window Sequence Number:
* Last Received Sequence Number:
* Last Seen:
* Last Updated:
* Link RQ:
* Link TQ:

h3. 2.2. Originator List

* Originator Address: The originator address of the node.
* Best Link TQ

h2. 3. Protocol Procedure


h3. 3.1 Broadcasting own Echo Location Protocol (ELP) Messages


Each node periodically (ELP interval) generates and broadcasts ELP messages for each interface B.A.T.M.A.N. is running on. A jitter may be applied to avoid collisions. 

+The Echo Location Protocol (ELP) Format:+

* Packet type: Initialize this field with the ELP packet type.
* Version: Set your internal compatibility version.
* Originator Address: Set this field to the primary MAC address of this B.A.T.M.A.N. node.
* Sequence number: On first broadcast set the sequence number to an arbitrary value and increment the field by one for each following broadcast.
* Interval: Set to the current ELP interval of this interface in milliseconds. The default interval is 500ms and it may be reconfigured during run-time.
* Num Neigh: The number of neighbors that are announced with this message.

If this B.A.T.M.A.N. interface wants to announce neighboring nodes it should append a neighbor entry message for each neighbor to be announced and fill the "number of neighbors" field accordingly.

<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | Packet Type   |    Version    |      TTL      |   Num Neigh   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                       Sequence Number                         |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                          Interval                             |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                     Originator Address                        |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |      Originator Address       |                               |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>

+The Neighbor Entry Format:+

* Neighbor Address: This field contains the MAC address of the neighbor to be announced.
* Link RQ: Fill this field with the total of the received sequence numbers (in percent) within the sliding sequence number window, including the time-based adjustment, from this neighbor. If that value would be 0, skip attaching that entry.

Note: See 'Neighbor Ranking' and 'Time-based Window Adjustment' to get a detailed description of how to count/obtain the RQ value. Neighbors with an RQ value of 0 are not to be appended.

<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                       Neighbor Address                        |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |      Neighbor Address       |    Link RQ    |    Alignment    |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>

h4. 3.3.1. ELP minimum packet size / padding

An ELP packet should be padded to at least 300 Bytes (excluding ethernet frame header) and may be padded to up to 1500 Bytes. Especially on wireless interfaces the packet size of broadcast packets can have quite an impact on the probability of arrival.

h3. 3.2. Receiving Echo Location Messages (ELP)


Upon receiving an ELP packet a node must perform the following preliminary checks before the packet is further processed:

* If the ELP contains a version which is different to the own internal version the message must be silently dropped (thus, it must not be further processed).
* If the sender address of the ELP message is an Ethernet multicast (including broadcast) address the message must be silently dropped.
* If the destination address of the ELP message is a unicast address the message must be silently dropped.
* If the originator address of the ELP message is our own the message must be silently dropped as this ELP message originated from this node.
* If the ELP message has not been received from an out-of-sync neighbor interface (see section 3.5) and if the ELP message does not contain a newer sequence number (duplicate, out-of-order or out-of-range) the message must be silently dropped.

h4. 3.2.1. Duplicate

<pre>
                          |=Current Window Sequence Number
  <...- - - - - - - - - - + + + + + + + + + + + + + + + + + + + + + +..>
      1                   0                   1                   2
      0 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  <--+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+->
            |<----------->|
            | WINDOW_SIZE |
            |             |
            
             <----------->=Last Received Sequence Number
                           (<= Current Window Sequence Number;
                            > Current Window Sequence Number - WINDOW_SIZE)
             <----------->=Received Sequence Number (= Last Received Sequence Number) 
</pre>

An ELP packet is considered a duplicate if:
* The last received sequence number is smaller than or equal to the current window sequence number.
* The last received sequence number is greater than the current window sequence number minus WINDOW_SIZE.
* The received sequence number is equal to the last received sequence number.

h4. 3.2.2. Out-of-Order

<pre>
                          |=Current Window Sequence Number
  <...- - - - - - - - - - + + + + + + + + + + + + + + + + + + + + + +..>
      1                   0                   1                   2
      0 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  <--+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+->
            |<----------->|
            | WINDOW_SIZE |
            |             |
            
             <----------->=Last Received Sequence Number
                           (<= Current Window Sequence Number;
                            > Current Window Sequence Number - WINDOW_SIZE)
             <---------->=Received Sequence Number (< Last Received Sequence Number)
</pre>

An ELP packet is considered out-of-order if:
* The last received sequence number is smaller than or equal to the current window sequence number.
* The last received sequence number is greater than the current window sequence number minus WINDOW_SIZE.
* The received sequence number is smaller than the last received sequence number.

h4. 3.2.3. Out-of-Range

<pre>
                                |=Current Window Sequence Number
        <...- - - - - - - - - - + + + + + + + + + + + + + + + + + + + + + +..>
            1                   0                   1                   2
            0 9 8 7 6 5 4 3 2 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
        <--+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+->
                  |<----------->|
                  | WINDOW_SIZE |
                  |             |
|<------...-------------------->|
           SEQNO_SIZE / 2
|<------...---->|=Last Received Sequence Number
</pre>

An ELP packet is considered out-of-range if:
* The received sequence number is not a duplicate and not out-of-order.
* The received sequence number is smaller than the current window sequence number.
* The received sequence number is greater than the current window sequence number minus SEQNO_SIZE / 2.


h3. 3.3. Neighbor Ranking


For each ELP message having passed the preliminary checks the following actions must be performed:

* The last seen time of this neighbor interface needs to be updated.
* The last updated time of this neighbor interface needs to be updated.
* The elp interval of this neighbor interface needs to be updated with the elp interval set in the received ELP message.
* The last received sequence number from this neighbor needs to be set to the sequence number of the received ELP message.
* If the sequence number of the received ELP message is higher than the current window sequence number then:
** The window's current sequence number for this neighbor needs to be set to the sequence number of the received ELP message.
** The sliding window of the ELP message must be shifted (purged) to reflect the new upper and lower boundaries of the ranking range.
* The sequence number of the received ELP message must be added to the sliding window.
* The new resulting link RQ value is calculated by counting all sequence numbers that are to be found in the recently adjusted sliding window.
* The neighbor entries must be parsed until an entry matching the MAC address of the incoming hard-interface has been found. If a match is found then save the received link RQ value as link TQ value towards this neighbor interface and skip the further traversal of the list. If no matching entry was found, set the link TQ value towards that neighbor to 0.
* The best link TQ needs to be updated.

h4. 3.3.1. Best Link TQ

The best link TQ is being determined in the following way:

best link TQ = max{for all neighbors belonging to the originator: link TQ * asym_penalty(link RQ)}

h5. 3.3.1.1 Asymmetric Link Penalty

The asymmetric penalty is being determined in the following way:

asym_penalty = 1 - (1 - link RQ)^3


h3. 3.4. Time-based Window Adjustment

Periodically all ELP windows must be shifted to the expected current sequence number. This needs to be done to avoid that the OGM protocol picks up outdated and therefore too high link quality values from ELP which do might not represent the current link quality anymore.

More precisely, for any interface of a node towards any according, stored neighbor interface check whether:

* The last updated time plus the elp interval times of this neighbor interface times two is higher than the current time.

If so, the following actions must be performed:

* The last updated time of this neighbor interface needs to be set to the current time minus the neighbor interface's ELP interval.
* The current window sequence number of this neighbor needs to be set to the expected sequence number (based on the current sequence number, the current time, the last updated time as well as the neighbor interface's elp interval) minus one. The result always needs to be rounded down.
* The sliding window of the ELP message must be shifted (purged) to reflect the new upper and lower boundaries of the ranking range.
* The new resulting link RQ value is calculated by counting all sequence numbers that are to be found in the adjusted sliding window.
* The best link TQ needs to be updated.

The period for checking and possible updating of the ELP windows should be chosen low enough to have an ELP window outdated for OUTDATED_MAX sequence numbers maximum.

Batman-adv periodically checks all ELP windows in the interval of the neighbor interface with the lowest ELP interval.

h3. 3.5. Detecting Out-of-sync Neighbor Interfaces

The sequence number based sliding window together with time-based window adjustment face two difficulties: For one thing a node may have rebooted. In that case the rebooted node might suddenly have a sequence number slightly smaller than it had before the reboot. Or for another thing, a node may have been out of sight for a longer time and due to slightly different clocks on the nodes the expected sequence number might have increased too quickly.

In both cases the ELP sequence numbers which are smaller than the expected sequence number would not be accepted and the ELP messages dropped, possibly for a very long time.

To overcome this issue a node is considered out-of-sync if:
* Last Seen + 2 * neighbor interface's ELP interval * WINDOW_SIZE < Current Time.

For the default ELP interval of 0.5s this would result in a 64s wait time in the worst case.

h3. 3.6. Neighbor Interface Purging Recommendations

A node may purge a neighbor interface from its neighbor list when its RQ value reaches 0. However a node with RQ 0 may be kept in the list as long as desired, as it does not make a difference for the routing decisions because of the asymmetric link penalty (see [ogm|OGM protocol] for details).

h2. 4. Proposed Values for Constants

* _WINDOW_SIZE_: 64
* _SEQNO_SIZE_: 2^32
* _OUTDATED_MAX_: 4

----

h1. Further Ideas for Optimizations

h2. EWMA - Exponentially Weighted Moving Average

Use the an exponential function to calculate the new RQ value. To be able to have both faster and more stable link quality measurements then
with the current SMA of 64-bit window size.

