h1. *BANDWIDTH METER*

h2. REPOSITORIES

 * http://git.open-mesh.org/?p=montik/batman-adv.git
 * http://git.open-mesh.org/?p=montik/batctl.git

h2. GENERAL DESCRIPTION

The project aims to create a kernel-space tool that measures the throughput between two nodes and avoids problems experienced with user-space tools like iperf and netperf. With those tools main problems are encountered on machines that are low on resources, including routers, since packets must be copied from kernel-space to user-space memory and aligned. On such devices this computational load can slow the device itself, leading to packet losses at the receiver side, thus altering the test result. Two modes are implemented:

* tcp-like: in this mode the behaviour of tcp should be re-created. We should verify if it is possible to use the existing, standard, tcp implementation or if it is needed to develop a tcp-like (simpler...) protocol just for this application.
** Using kernel TCP stack is too complex and the problem of unaligned data remains. Furthemore it requires an IP address for the destination.

* udp-like: one directional, no retransmission, stream of data;
** How to ensure that all data was transmitted
** How do we ensure that the last packet/magic packets were not transmitted out of order
** how does the remote node gets informed that test finished even when *many* packets are dropped

h2. SPECIFICATION

# the protocol will be a "Go-Back-N":http://en.wikipedia.org/wiki/Go-back-N: a fixed window, cumulative acknowledgment when the whole window is received; this is intended as a rough approximation of the TCP behaviour;
# The user specifies how much data the bandwidth meter is intended to send in the session; once the transmission is completed (i.e. all the data is received by the sender) the transmission time is reported. _Further details on time computation to be added_; It should allow:
## Possibility to specify if the node is sender or receiver (data flow direction);
## Possibility to add others operation modes later (e.g. "UDP" mode);
## Integrated in the batman ICMP protocol; 
## The test is initiated through batctl. The user specifies at least the destination, the amount of data to be sent, if it is sender or receiver.

h2. PROTOCOL 

Two new bat-ICMP packet type, BW_METER and BW_ACK, are defined.

In order to provide an easier protocol to implement, Go-Back-N is used, with a static window. The window is made of WIN_PACKETS packets (this could be specified by the user or fixed). T

h3. The sender

The sender maintains, for each test ongoing, the following variables:
# to_send: total amount of data to send;
# first_sent: sequence number (i.e. offset) of the first packet of the current window
# window_size

It sends WIN_PACKETS packets in a burst and starts a timeout, then waits for an ack, that is an ICMP packet with number BW_ACK. The ack should carry the seqence number first_sent+window_size. If the ack is not received before the timeout expires, all the n packet are re-transmitted. Notice that there is no buffer, just the three variables that "emulates" it. The sender ICMP packet has type BW_METER, a 32 bit offset and a 32 bit window size.

The receiver, as the first BW_METER packet is received, allocates the window and waits for it to be completed. When the window is completed, an ack is sent. 


For protocol beginning and termination an TFTP like approach is used. To terminate the protocol, a packet of not-full lenght is sent.

h2. ICMP PACKET HEADER:

* window size

* sequence number


h2. TODO

h3. Currently doing

* define packet header

h3. Future tasks


* being a connection oriented protocol, some data structures relative to each connection will be defined. 
Check TCP implementation of such data structures and how timeouts are used to handle connections.

h3. Done

* define and implement user-space interface (through batctl) [options still to be added]: 
** created files bw_meter.c in batman-adv and in batctl
if batctl bw is invoked from the command line, a function in kernel space get called, in a similar fashion as for ping (but the packet will be generated in kernel space)

* define the protocol, based on Go-Back-N

* set up virtual machines for testbed: using two virtual machine with Debian and kernel 3.2.12 to test the modifications introduced in order to call the bandwidth meter through batctl; the two machines are attached to two tun interfaces bridged together.

h2. Documentation

 * "data alignment in the kernel":http://www.mjmwired.net/kernel/Documentation/unaligned-memory-access.txt

 * "skb":http://vger.kernel.org/~davem/skb.html
