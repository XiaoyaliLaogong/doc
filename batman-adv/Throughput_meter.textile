h1. Bandwidth meter protocol

This page explains the protocol and inner workings of the bandwidth meter. The motivation behind the bandwidth meter and its design is explained on the [[open-mesh:2012-10-06-GSoC-2012-Edo-Monticellis-Final-Report|bandwidth meter introduction page]]. More technical details are discussed on the [[bandwidth_meter_debug|technical and debug page]].

h2. The bandwidth meter protocol

The goal of the protocol is to approximate the behavior of TCP in order to measure a bandwidth close to what a standard TCP connection would achieve. The bandwidth meter protocol na√Øve implementation of of the TCP protocol with a congestion handling mechanism inspired by NewReno. The behavior is described in the next subsections.
 
During the test ICMP packets only are exchanged. In particular a new ICMP packet type has been created: the ICMP_BW.
This particular packet type is directly passed to the bandwitdh meter submodule which is in charge of handling the connection. The ICMP_BW packets can be of two particular subtype:
* MSG
* ACK

Since the test is performed unidirectionally, ACKs are not piggybacked on normal message (like TCP does) and therefore two different packet type were required.
A node can participate in different tests at the same time, but with different nodes. This means that two or more tests cannot be performed at the same time between the same pair of nodes.

Between two consecutive experiment runs at least two seconds should be waited, to ensure the connection on the receiver side has been properly closed.

h3. The sender

The sender maintains, for each ongoing test, the following variables:

* *last_acked* the last payload byte acked by the receiver
* *last_sent* the next byte to be sent

h3. The receiver

To begin the test, the receiver must receive an ICMP packet with msg_type BW, subtype MSG and sequence number BATADV_BW_FIRST_SEQ: if another packet is received, the test is not started, no ack is sent back and no data structure is allocated on the receiver side.

If that particular packet is received and no other bandwidth test is ongoing with the same node, the connection is opened and the resources are allocated.


h2. PROBLEMS and FURTHER DEVELOPMENT

-Two main protocol limitations lies in the fixed size of the window and in the slow reaction of the timeout.-

-The window problem depends on the fact that at most a window can be sent every round trip time, as shown in the image above. If the window size is small, this can limit the performances; the window size also affects retransmission, in case a packet is lost, the whole window is retransmitted.-

-When a packet is lost, no new ACKs are received: the window is not slit and thus, after having sent all the packets in the window, the protocol is stuck.-
-This undesiderable situation lasts until the timeout expires. This would suggest a short timeout is better since it avoids a long protocol locking. On the other hand, if the timeout is shorter than RTT, it expires before the ACKs can arrive, leading to many unnecessary retransmissions. Since RTT depends on the network structure, it is safer to have a more conservative timeout.-

-A possible solution to the first problem could be a dynamic window system similar to that of TCP: every time an ack is received, the window is enlarged (up to a maximum fixed size) and everytime something bad happens (timeout expires or ``fast retransmit"-like approaches could also be considered) it is reduced.-

-A dynamic timeout, based on RTT measured while test is performed, could make the protocol more performant even in case of high packet losses. Furthermore something similar to TCP's "fast-retransmit" could also be implemented easily: if three ACKs are received with the same packet number, that probably means the next packet has been lost and it can be resend alone, without the need to resend
the whole window.-

-Since both the window size and the timeout are statically defined in the current implementation, the protocol performances greatly depends on how their chosen values adapt to the network scenario in which the test is performed.-