h1. *BANDWIDTH METER*

h2. Branches

 * http://git.open-mesh.org/?p=batman-adv.git;a=shortlog;h=refs/heads/montik/bw1
 * http://git.open-mesh.org/?p=batctl.git;a=shortlog;h=refs/heads/montik/bw1

h2. GENERAL DESCRIPTION

This section explains the project aim and shows how to use the bandwidth meter. The protocol is described in the next section, while a more technical details are discussed in the "technical and debug page":http://www.open-mesh.org/projects/batman-adv/wiki/GSOC2012_BW_debug

The project aim is to create a kernel-space tool that measures the throughput between two nodes and avoids problems experienced with user-space tools like iperf and netperf. With those tools main problems are encountered on machines that are low on resources, including routers, since packets must be copied from kernel-space to user-space memory and aligned. This computational load can slow such devices, leading to packet losses, thus altering the test result. A TCP-like mode is implemented to *approximate* TCP behaviour (the protocol is indeed much simple).

The test is started through batctl:

<pre>
batctl bw <MAC ADDRESS>
</pre>

when the test is over the throughput in *Bytes per second* is returned.
Example:

<pre>
# batctl bw 00:00:00:00:00:01
Bandwidth meter called towards 00:00:00:00:00:01
Test over in 3564 ms.
         sent 70000000 bytes.
Throughput 19640000 Byte/s
</pre>

The test doesn't print any output until it's termination; you can abort an ongoing test with CTRL-C. 
Example:

<pre>
# batctl bw 00:00:00:00:00:01
Bandwidth meter called towards 00:00:00:00:00:01
^CTest aborted
</pre>

h2. PROTOCOL 

The protocol is a connection oriented, "Go-Back-N":http://en.wikipedia.org/wiki/Go-back-N protocol with fixed window and cumulative acknowledgement. Of the two end nodes, one is the sender and the other the receiver; their behaviour is described in the next subsections.

During the test ICMP packets only are exchanged, so two fresh ICMP packet types are defined (BATADV_BW_METER, BATADV_BW_ACK). A node can participate in different tests at the same time, but with different nodes. This means that two or more tests cannot be performed at the same time between the same two nodes.

Between two consecutive experiment runs at least one second should be waited, to assure connection is closed before its re-opening.

h3. The sender

The sender maintains, for each ongoing test, the following variables:

# next_to_send: next packet in the window that is to be sent
# window_first: sequence number (i.e. packet number) of the first packet of the current window (i.e. last acknowledged packetd)

To begin the test, the sender sends BW_WINDOW_SIZE packets in a burst and starts a timeout, waiting for an ack. An ACK is an ICMP packet of type BATADV_BW_ACK that carries the sequence number of the last received packet *in order* (cumulative acknowledgment), meaning that all the packets up to that sequence number have been received. If the ACK for a packet is not received before the timeout expires, all the unacked packets in the window are re-transmitted. The sender ICMP packet has message type BW_METER.

So BW_WINDOW_SIZE packets are sent, then the a timeout is started:

* when the timeout expires, the whole window is transmitted again. This means BW_WINDOW_SIZE packets are transmitted, with sequence numbers starting from window_first, the last packet that has been acknowledged;
* everytime an ack is received, the timer is updated. Update window_first to ack's "sequence number" and send from next_to_send to (window_first + BW_WINDOW_SIZE) new packets (with seqno starting from next_to_send). Every time a packet is sent, next_to_send is increased.

!protocol1.png!

h3. The receiver

To begin the test, the receiver must receive the packet with seq 0: if another packet is received, the test is not considered started, no ack is sent back and no data structure is allocated on the receiver side. 

If the packet number zero is received and no other bandwidth test is ongoing with the same node, the connection is consiered open.

The receiver basically keeps a single variable, the beginning of the window:

# window_first: the sequence number of the first packet of the window

If a BW_METER packet is received on that connection, it's offset is checked: if it belongs to the window, shift window_first and send back an ack. Otherwise, just send back an ack to avoid protocol deadlock.

When a packet that is not full (its full size is different from that of the others) is received *in order* the test is finished. Send a normal ack back with the sequence number of the short packet, wait a certain amount of time and "declare the test finished" (i.e. free variables and accept new test packets). 
The time to wait should be greater than sender's timeout + RTT: if the last ACK is lost, the sender should re-send all the missing packets of the last window after the timeout expires. If no packet is received in 1 second, the receiver declares the connection closed and aborts the test.
