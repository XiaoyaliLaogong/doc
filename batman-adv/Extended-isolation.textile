h1. Extended-isolation

This feature wants to be a generalisation of the already existing [[AP-isolation]]. It replaces the old mechanism but at the same time keeps a backward compatible behaviour.

When the extended-isolation is enabled batman-adv drops all the wirelsss-to-wireless traffic and at the same time marks clients as +isolated+ based on the user configuration.
This way batman-adv can help to solve two problems:
# mark as isolated not only wireless clients but also all those hosts matching a particular user criteria
# apply firewall rules at the receiving receiving nodes on traffic generated by clients marked as isolated

h2. How to recognise isolated clients

In the classic AP-Isolation mechanism clients are marked as +WIFI+ when packets originated by them are reaching the batman-adv interface after having being received on a wireless interface.
With the Extended-isolation instead the idea is to set as +isolated+ every client which packets contains a given fwmark value. This increases the flexibility of the whole mechanism because the user can setup any creative firewall rule to make the host mark packets only if matching particular conditions.
A simple use case might be to mark all the packets coming in through a given interface by using _tc_:
<pre>
# tc qdisc add dev eth1 handle ffff: ingress
# tc filter add dev eth1 parent ffff: protocol all pref 10 u32 match u32 0 0 flowid 1:1 action skbedit mark 0x6
</pre>

With these commands, all the the packets coming in through +eth1+ will be marked with the fwmark 0x6.

The next step it is to configure batman-adv properly, meaning that the use must tell the module which is the value to match in the +skb->mark+ field to recognise isolated clients.
<pre>
# echo 6/0xffffffff >/sys/devices/virtual/net/bat0/mesh/isolation_mark
or
# batctl isola 0x06/0xFFFFFFFF # VALUE/MASK
</pre>

As reported in the example above the isolation mark is configured in batman-adv in the form +VALUE/MASK+. This has been implemented as such in order to improve the flexibility of the mechanism even more. The fwmark value attached to a given packet can be (and usually is) used by several components in the kernel for different purposes. To avoid colliding and breaking those other mechanisms batman-adv should work only on a limited number of bits within the fwmark field. The MASK part is a (hexadecimal) bitmask representing which bits batman-adv is allowed to work with, while the VALUE represent the real value that has to be used. Due to the restriction given by MASK the VALUE is altered in order to avoid touching any bit that is not selected by the former.

h2. How to transfer the mark from node to node

The previous section explained how to detect clients that have to be marked as +isolated+, but how is this information passed to other nodes in the network?
Clients recognised as +isolated+ are marked with a special TT flag, namely TT_CLIENT_ISOLA, which is then spread all over the network along with all the rest of the TT information.
This way nodes in the network are aware of which global client has to be considered as isolated.

Now all the nodes in the network have all the needed information and at this point there are two possible scenarios:
# a packet has to travel from an isolated client to another isolated client => the packet is dropped on the source node
# a broadcast packet is sent by an isolated client => batman-adv will send the packet and every receiving node will mark the locally generated copy of the packet with the configured value (isolation mark). This way any firewall rule on the receiving endpoint can play the same game like if the packets were locally generated. The marking upon reception is possible thanks to the TT_CLIENT_ISOLA flag that has been previously spread in the network (the original mark is not involved in this operation).

Note that each node could have its own isolation mark and there is no need for them to be the same.

h2. How to drop broadcast traffic

Following the example reported in the previous sections, a set of tc commands can help to drop all the broadcast packets having been marked with a given fwmark:
<pre>
# tc qdisc add dev bat0.1 root handle 1: prio
# tc qdisc add dev bat0.1 parent 1:3 handle 30: netem loss 100%25
# tc filter add dev bat0.1 parent 1:0 protocol all prio 1 handle 6 fw classid 1:3
</pre>

With this instructions two task are accomplished:
# a netem queue is created telling to drop 100%25 of the packets entering this it
# a filter rule is added in order to redirect all the traffic matching the specified mark to the netem queue.

Note that _tc_ is used instead of iptables because the latter would only be able to work on frames carrying IPv4/6 packets, while in this case the target is the entire traffic.
However, any kind of rule interacting with the fwmark can be used to implement any wanted behaviour.

h2. Example

!ext-isola.png!

In the picture above, traffic is allowed only between the wired and the non-isolated wireless interface (both the interfaces must be "isolated" to block the traffic).
Wireless to wireless traffic is blocked due to the already existing [[AP-isolation]] mechanism, while between the two wired "isolated" interfaces there is no communication because of the new Extended Isolation feature described in this page.