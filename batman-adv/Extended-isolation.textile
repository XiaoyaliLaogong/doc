h1. Extended-isolation

This feature wants to be a generalisation of the already existing [[AP-isolation]]. Extended-isolation will replace the old feature but at the same time will be backward compatible.

The idea is to not only let batman-adv drop any wirelsss-to-wireless traffic, but also to make the host system aware of what packet is coming from an "isolated" client so that the host itself can make a decision.
This aspect helps to solve two problems:
# mark as isolated not only wireless clients but also all those hosts behind any user-configured interface
# drop broadcast traffic right before accessing an isolated interface (e.g. a wireless interface behind which there are only clients which are not supposed to receive such traffic

h2. How to recognise isolated clients

In the classic AP-Isolation mechanism clients are marked as WIFI when packets originated by them are reaching batman after having being generated by a wireless interface. In this case instead the idea is to mark as _isolated_ every client which packets are marked with a given value. This increases the flexibility of the mechanism since the administrator can setup any firewall rule to make the host mark the packets only if matching certain conditions.
A common example may be to mark all the packets coming in through a given interface. _tc_ can be used for this:
<pre>
# tc filter add dev eth1 parent ffff: protocol all pref 10 u32 match u32 0 0 flowid 1:1 action skbedit mark 0x6
</pre>

With this intruction, all the packets coming in through eth1 will be marked with the value 0x6.

batman-adv has to be configured properly, meaning that the administrator must tell it which is the value too look for in the mark field.
<pre>
# batctl isola 0x06
</pre>

h2. How to drop traffic

A specular series of tc command can then help to drop all the packets having been marked with a given value:
<pre>
# tc qdisc add dev bat0.1 root handle 1: prio
# tc qdisc add dev bat0.1 parent 1:3 handle 30: netem loss 100%25
# tc filter add dev bat0.1 parent 1:0 protocol all prio 1 handle 6 fw classid 1:3
</pre>

With this instructions, first the netem queue is created telling to drop 100%25 of the packets entering this queue and then a filter rule is added in order to redirect all the traffic matching the rpeorted mark to the netem queue.

Note that _tc_ is used instead of iptables because the latter would only be able to work on frames carrying IPv4/6 packets, while in this case the target is the entire traffic.

h2. How to trasnfer the mark fron node to node

What explained so far is ok in case of multiple interfaces connected to a bridge, but what about a batman-adv mesh network?
The idea is to put a new flag, the TT_CLIENT_ISOLA flag, on every client generating packets marked with the configured value. At this pint the flag is spread among the network along with all the other TT information.
At this point two options are possible:
# a packet has to travel from an isolated client to anothr isolated client => the packet is dropped on the source node
# a broadcast packet is sent by an isolated client => batman-adv will send the packet and every receiving node will remark the locally generated copy of the packet with the configured mark value. In this way the _tc_ rules on the receiving node can play the same game as the packets were generated locally. The remarking is possible thanks to the TT_CLIENT_ISOLA flag that has been previously spread in the network.

h2. Example

!ext-isola.png!

As depicted in the picture above, traffic is allowed only between the wired and the non-isolated wireless interface.
Wireless to wireless traffic is blocked due to the already existing [[AP-isolation]] mechanism, while between the two isolatted-wired interfaces there is no communication because of the new Extended Isolation feature described in this page.