= Batman-adv bridge loop avoidance =

{{{
#!div style="width: 46em; text-align: justify"

This document explains how batman-adv is able to detect & avoid loops that are created by bridging multiple batX interfaces on different hosts into the same ethernet segment (e.g. LAN) that are outside of batman's realm. If you don't intend to connect multiple batman-adv hosts to the same ethernet segment or don't use bridging you can safely skip this page.

__Note__: It is the normal traffic which loops around, not the protocol traffic generated by batman-adv. Unsurprisingly, bridge loops are not unique to batman-adv mesh networks but have been around for quite a while. While this document discusses bridge loops in conjunction with batman-adv in great detail it might be helpful to have some background knowledge regarding bridge loops.

=== Where does the loop come from ? ===

To better understand what creates the loop it is helpful to focus on a sample topology. The simplest case involves only 2 nodes that are connected via with wifi and an ethernet LAN at the same time.

[[Image(wiki:bridge-loop-avoidance:lanloop1.png)]] 

Here, the wifi interfaces (W1 & W2) have a decent link quality and the LAN interfaces (L1 & L2) are bridged with the batX interface. Let's assume a simple ARP broadcast from the LAN arrives at node1 which then floods the mesh with that new packet. Node2 receives the packet via the mesh and forwards it to the LAN where node1 receives it ...

[[Image(wiki:bridge-loop-avoidance:lanloop2.png)]]

If there wasn't the LAN connection this would not happen because batman-adv provides a flood/loop protection inside the batman header for every payload packet traveling through the mesh but as soon as the packet gets bridged this information is stripped from the packet. Every batman-adv node connected to the LAN will think: Hey, it is a new packet!


=== How to avoid the loop ? ===

A common solution to avoid bridge loops is to deploy protocols like STP or one of its derivatives. STP would detect the loop and close ports to avoid it. Running STP over the mesh is not really what we want as STP has no clue about the link qualities and who wants to run a spanning tree over lossy links ?

Batman-adv needs its own mechanism to detect other batman nodes connected to the same LAN and then close the appropriate ports. By simply re-using the existing OGM packets we don't need to invent a whole new packet type or protocol. OGMs that come in via the batX interface (as this interface is bridged to the LAN) are interpreted as "port announcements" and allow batman-adv to learn about all the "batX neighbors". Internally, it keeps a list of these neighbors and selects the one of them as 'gateway' to the LAN. All traffic from and to the LAN will have to go through this one special gateway, thereby avoiding the loop. 

In practice this means the following:
 * If a node is the gateway to the LAN it does not need to do anything special. Forwarding traffic between the LAN and the mesh as usual.
 * All other batman-adv nodes connected to the LAN drop traffic coming from the LAN (the gateway takes care of that) and forward all traffic destined for the LAN to the gateway node.

To keep things simple the node with the smallest mac address becomes the gateway to the LAN.

[[Image(wiki:bridge-loop-avoidance:lanloop3.png)]]


=== How to activate the bridge loop avoidance ? ===

The bridge loop avoidance feature is built-in and does not need to be activated in a special way. Batman-adv will automatically detect and deal with the loop provided that each node sends OGMs on the bridge interface. 

Simple steps to see it in action:
 * add your wifi interface 
{{{
batctl if add wlan0
}}}

 * create a bridge for bat0 and your lan
{{{
brctl addbr br-lan
brctl addif br-lan eth0
brctl addif br-lan bat0
}}}

 * activate batman on the bridge
{{{
batctl if add br-lan
}}}

Batman-adv can also deal with vlans on top of batX and offers a list of batX neighbors via debugfs (batctl support is available).

}}}
