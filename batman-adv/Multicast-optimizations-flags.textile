h1. Basic Multicast Optimizations – Flags Explained

Prior Readings:

 * [[Basic-multicast-optimizations|Basic Multicast Optimizations]]
 * [[Basic-multicast-optimizations-tech|Basic Multicast Optimizations – Technical Description]]

h2. BATADV_MCAST_WANT_ALL_UNSNOOPABLES

For IP a host listening to certain multicast addresses announces these via ICMPv6-MLD (for IPv6) and/or IGMP (for IPv4) messages on a link:

!{width: 85%25;}basic-multicast-snoopables-announce.png!

However there are two exemptions to this:

!{width: 85%25;}basic-multicast-snoopables-unknown.png!

 * No MLD messages for the all-nodes IPv6 multicast (ff02::1) address. "RFC4541":https://tools.ietf.org/html/rfc4541, section 3:

> [...] The only exception is the address FF02::1 which is the all hosts link-scope address for which MLD messages are never sent. [...]

 * No requirement for IGMP messages for IPv4 link-local multicast addresses (224.0.0.x). "RFC4541":https://tools.ietf.org/html/rfc4541, section 2.1.2.2):

> [...] This recommendation is based on the fact that many host systems do not send Join IP multicast addresses in the [224.0.0.x] range before sending or listening to IP multicast packets. [...]

Instead of always flooding IPv4 link-local multicast and IPv6 all-nodes multicast traffic it was chosen to introduce this flag to allow performing multicast optimizations for these addresses too if no bridges are involved.

Although we are not supporting bridges yet (i.e. one bridge causes all other nodes to flood multicast traffic without any optimizations), the logic of this flag was implemented already to avoid a future compatibility break.

h2. BATADV_MCAST_WANT_ALL_IPV4 / BATADV_MCAST_WANT_ALL_IPV6

As seen for the previous flag, MLD and IGMP messages are essential for a batman-adv node to determine any multicast listeners behind a Linux bridge.

Unfortunately there are cases for older MLD protocol and IGMP versions – i.e. MLDv1/IGMPv1/IGMPv2 – where not all such messages from all listeners behind a bridge arrive at the according batman-adv node. This is due to the following report suppression clause.

h3. MLDv1/IGMPv1/IGMPv2 Report Suppression

!{width: 80%25;}basic-multicast-switch.png!

 * IGMPv2: RFC2236, section 3:

> [...] If the host receives another host's Report (version 1 or 2) while it has a timer running, it stops its timer for the specified group and does not send a Report, in order to suppress duplicate Reports. [...]

 * MLDv1: RFC2710, section 4:

> If a node receives another node's Report from an interface for a multicast address while it has a timer running for that same address on that interface, it stops its timer and does not send a Report for that address, thus suppressing duplicate reports on the link.

This on its own, not getting to know all listeners behind a bridge port, is not an issue as such as a batman-adv node would receive the according listener reports from a single listener behind a bridge port at least which would be sufficient.

However, if a snooping switch were simply flooding such listener reports, then it would not be able to notice all listeners anymore:

!{width: 80%25;}basic-multicast-switch-uncertain.png!

Therefore another RFC mandates an additional report suppression for snooping switches:

!{width: 80%25;}basic-multicast-snooping-switch.png!

 * RFC4541, section 2.1.1.1)

> A snooping switch should forward IGMP Membership Reports only to those ports where multicast routers are attached. [...]

Which in turn can potentially lead to a batman-adv node not receiving any MLD/IGMP report for a certain multicast address from a bridge port even though a listener behind that port exists:

h3. The Problem

This allows us to construct the following scenario which would cause packet loss for multicast packets:

!{width: 50%25;}basic-multicast-querier-scenario.png!

 * _*Querier:*_ An IGMP or MLD querier
 * _*Snooping Switch:*_ A multicast aware layer 2 switch
 * _*Listener:*_ An IPv4 or IPv6 multicast listener
 * _*Bridge:*_ A Linux kernel bridge on top of a bat0 device of a batman-adv node
 * _*Sender:*_ An IPv4 or IPv6 multicast sender
 * _*Mesh:*_ A mesh network consisting of batman-adv nodes

h3. The Solution