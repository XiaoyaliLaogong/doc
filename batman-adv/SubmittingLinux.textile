{{include(open-mesh:TemplateDeprecated)}}

h1. Submitting Patches to Linux


We currently submit patches for Linux from our next branch. I try to give a short overview about it using some patches submitted to DaveM.

Following steps must always be done:

* get the linux-integration + batman-adv repository
* get the newest patches from next and maint
* check for compat code
* squash/cleanup patches
* fix "Fixes: " and other commit id references
* check if all versions compile cleanly using sparse (cgcc)
* do a merge in a temporary branch and compare the result with batman-adv:next.git
* check commit messages author/signed-off-by of patches
* check if all patches are checkpatch.pl clean
* prepare changelog
* create tag for david which includes the changelog
* format patches
* submit cover letter + patches
* wait until David accepted the pull request
* update base patches


h2. Variables

There are different basepoints/references used when preparing the 

* GIT_OM_SERVER
** server from which the open-mesh.org repositories are retrieved
* LM_NEXT
** name of branch in batman-adv.git which points to the latest patch already ported to linux-merge.git:batadv/net-next
* LM_MAINT
** name of branch in batman-adv.git which points to the latest patch already ported to linux-merge.git:batadv/net
* BASE_NETNEXT
** some recent commit in net-next.git which should be used as base commit for the patches which will be applied (chose wisely)
* BASE_NET
** some recent commit in net.git which should be used as base commit for the patches which will be applied (chose wisely)

<pre>
GIT_OM_SERVER="git+ssh://git@open-mesh.org"
LM_NEXT=ecsv/lm_next
LM_MAINT=ecsv/lm_maint
BASE_NETNEXT=v4.7-rc1
BASE_NET=v4.7-rc1
</pre>

h2. get the linux-integration + batman-adv repository

First step is to actually get the repositories and create the branches. You may also use the --reference option for linux-merge to speedup the download when you already have some linux repository on you system

<pre>
git clone "${GIT_OM_SERVER}/linux-merge.git" linux-merge
git -C linux-merge remote add net-next git://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git
git -C linux-merge remote add net git://git.kernel.org/pub/scm/linux/kernel/git/davem/net.git
git -C linux-merge remote update --prune
git -C linux-merge branch base/net --track origin/base/net
git -C linux-merge branch base/net-next --track origin/base/net-next
git -C linux-merge branch batadv/net --track origin/batadv/net
git -C linux-merge branch batadv/net-next --track origin/batadv/net-next
git clone "${GIT_OM_SERVER}/batman-adv.git" batman-adv
git -C batman-adv branch "${LM_NEXT}" --track "origin/${LM_NEXT}"
git -C batman-adv branch "${LM_MAINT}" --track "origin/${LM_MAINT}"
</pre>

The next step is to make sure that out linux-merge.git branches are either on top or equal the chosen. It should also be checked first that it is really a basepoint in the chosen branches

<pre>
git -C linux-merge remote update --prune
git -C linux-merge branch -r --contains="${BASE_NET}" net/master
git -C linux-merge branch -r --contains="${BASE_NETNEXT}" net-next/master

git -C linux-merge checkout base/net
git -C linux-merge merge --ff-only "origin/base/net"
git -C linux-merge merge --ff-only "${BASE_NET}"

git -C linux-merge checkout base/net-next
git -C linux-merge merge --ff-only "origin/base/net-next"
git -C linux-merge merge --ff-only "${BASE_NETNEXT}"
</pre>

Problems during this have to either be fixed by using a correct base commit, fixing the local branches or by rebasing the remaining patches on the batadv/* branches on top of the base commits (think twice before rebasing).

The same has to be done for the batman-adv repository. Here it is is important to update the maint branch manually after releases. Otherwise it would look like patches which were already submitted to net-next have to be send again to net. But make sure that there are no actual fixes between ${LM_MAINT} and origin/maint which were missed earlier

<pre>
git -C batman-adv remote update --prune

git -C batman-adv checkout "${LM_MAINT}"
git -C batman-adv merge --ff-only "origin/${LM_MAINT}"

git -C batman-adv checkout "${LM_NEXT}"
git -C batman-adv merge --ff-only "origin/${LM_NEXT}"
</pre>

h2. get the newest patches

h3. from next

<pre>
cd batman-adv
git branch -D rebase
git checkout -b rebase --no-track origin/next
git rebase -i origin/maint --onto "${LM_NEXT}"
</pre>

This patches have to be cleaned up. First these these changes have to be squashed so that "Fixes: " patches are squashed together with the patches which introduced the problem (when they exist). Also compat code has to be removed. Both things can be identified with git log:

Patches with "Fixes: " lines:

<pre>
git log --grep='^Fixes: ' "${LM_NEXT}"..rebase
</pre>

The extra stuff which should not be submitted can be identified via:

<pre>
git log --stat --oneline "${LM_NEXT}"..rebase -- compat-sources compat-include README.external CHANGELOG Makefile .gitignore .gitattributes compat.h gen-compat-autoconf.sh README
</pre>

This can all be cleaned up by using git-rebase and then marking the relevant commits for editing. It may also be a good idea to move patches like "Start-new-development-cycle" to the front

<pre>
git rebase -i "${LM_NEXT}"

# edit the commit message to point to the correct upstream commit -- just search in linux-merge for the commit name
git commit --amend

# remove changes either reverting to previous versions (new files have to be deleted)
git checkout HEAD~1 compat-sources compat-include README.external CHANGELOG Makefile .gitignore .gitattributes compat.h gen-compat-autoconf.sh README

# delete some new file (example)
git rm -f compat-include/net/genetlink.h

# at the end continue with the rebase to the next commit
git rebase --continue
</pre>

It is a good idea to check again if some file was missed. It is also a good idea to manually check the commit messages for other commit references:

<pre>
git log --stat "${LM_NEXT}"..rebase
</pre>

If everything looks good then these patches should be formatted (make sure that you don't have some old patches in the directory). The branch of already prepared patches has to be updated

<pre>
git format-patch -s "${LM_NEXT}"..rebase
git checkout "${LM_NEXT}"
git merge --ff-only origin/next
git push origin "${LM_NEXT}"
</pre>

Save the generated patches to a save place. Lets call this place $EXPORTED_PATCHES_NEXT

h3. from maint

Make sure that ${LM_NEXT} was updated after a release correctly and ${LM_NEXT}..origin/maint is containing patches which were send to net-next

The rest of the rebase process works similar to the next process

<pre>
cd batman-adv
git branch -D rebase
git checkout -b rebase --no-track origin/maint
git rebase -i origin/maint --onto "${LM_MAINT}"
</pre>

This patches have to be cleaned up. First these these changes have to be squashed so that "Fixes: " patches are squashed together with the patches which introduced the problem (when they exist). Also compat code has to be removed. Both things can be identified with git log:

Patches with "Fixes: " lines:

<pre>
git log --grep='^Fixes: ' "${LM_MAINT}"..rebase
</pre>

The extra stuff which should not be submitted can be identified via:

<pre>
git log --stat --oneline "${LM_MAINT}"..rebase -- compat-sources compat-include README.external CHANGELOG Makefile .gitignore .gitattributes compat.h gen-compat-autoconf.sh README
</pre>

This can all be cleaned up by using git-rebase and then marking the relevant commits for editing. It may also be a good idea to move patches like "Start-new-development-cycle" to the front

<pre>
git rebase -i "${LM_MAINT}"

# edit the commit message to point to the correct upstream commit -- just search in linux-merge for the commit name
git commit --amend

# remove changes either reverting to previous versions (new files have to be deleted)
git checkout HEAD~1 compat-sources compat-include README.external CHANGELOG Makefile .gitignore .gitattributes compat.h gen-compat-autoconf.sh README

# delete some new file (example)
git rm -f compat-include/net/genetlink.h

# at the end continue with the rebase to the next commit
git rebase --continue
</pre>

It is a good idea to check again if some file was missed. It is also a good idea to manually check the commit messages for other commit references or missing signed-off-by:

<pre>
git log --stat "${LM_MAINT}"..rebase
</pre>

If everything looks good then these patches should be formatted (make sure that you don't have some old patches in the directory). The branch of already prepared patches has to be updated

<pre>
git format-patch -s "${LM_MAINT}"..rebase
git checkout "${LM_MAINT}"
git merge --ff-only origin/maint
git push origin "${LM_MAINT}"
</pre>

Save the generated patches to a save place. Lets call this place $EXPORTED_PATCHES_MAINT

h2. Apply patches on linux-merge

h3. from next

The patches were already exported. So they only have to be applied in the correct branch

<pre>
cd linux-merge
git checkout batadv/net-next
git merge --ff-only origin/batadv/net-next
./scripts/checkpatch --strict "${EXPORTED_PATCHES_NEXT}"/*.patch
git am -s "${EXPORTED_PATCHES_NEXT}"/*.patch
git push origin batadv/net-next
</pre>

h3. from maint

The patches were already exported. So they only have to be applied in the correct branch

<pre>
cd linux-merge
git checkout batadv/net
git merge --ff-only origin/batadv/net
./scripts/checkpatch --strict "${EXPORTED_PATCHES_MAINT}"/*.patch
git am -s "${EXPORTED_PATCHES_MAINT}"/*.patch
git push origin batadv/net
</pre>

h2. check if all versions compile cleanly using sparse (cgcc)

TODO

h2. check if all patches are in linux-merge

TODO


h2. submit patches

TODO

A good commit in has to be chosen. We should not send more than 20 patches for net-next for each pull request. A lower number (6?) of patches should be used for net.

Lets assume a good commit is ebe24cea95ab969f76f2922032f6c390fdc816f2

<pre>
git tag -s batadv-next-for-davem-20160518 ebe24cea95ab969f76f2922032f6c390fdc816f2
# write a good commit message
git push origin batadv-next-for-davem-20160518
</pre>

The patches then have to be prepared and the cover letter has to be created for the pull request. For net-next it would look like:

<pre>
git format-patch base/net-next..batadv-next-for-davem-20160518
git request-pull base/net-next git://git.open-mesh.org/linux-merge.git batadv-next-for-davem-20160518
# write cover letter
git send-email --no-thread --in-reply-to=$MESSAGE_ID_FROM_COVER_LETTER --to=davem@davemloft.net --cc=netdev@vger.kernel.org --cc=b.a.t.m.a.n@lists.open-mesh.org 00*.patch
</pre>

or for net:

<pre>
git format-patch base/net..batadv-next-for-davem-20160518
git request-pull base/net git://git.open-mesh.org/linux-merge.git batadv-for-davem-20160518
# write cover letter
git send-email --no-thread --in-reply-to=$MESSAGE_ID_FROM_COVER_LETTER --to=davem@davemloft.net --cc=netdev@vger.kernel.org --cc=b.a.t.m.a.n@lists.open-mesh.org 00*.patch
</pre>

Now I will write something like

<pre>
Subject: pull request [net-next]: batman-adv 20160518

Hi David,

these are the fixes that couldn't make it for linux-4.6 rebased on top
of net-next.

They were all supposed to be applied on 4.6, therefore it would be nice
if you could queue them for inclusion in the 4.6.1 stable release.

Please pull or let me know of any problem!


I also have a question: I have another bugfix that should only be
applied to 4.6 and not to 4.7/net-next - should I directly send it
to stable@vger.kernel.org ?


Thanks a lot,
        Antonio

The following changes since commit 917fa5353da05e8a0045b8acacba8d50400d5b12:

  Revert "phy dp83867: Fix compilation with CONFIG_OF_MDIO=m" (2016-05-17 14:49:55 -0400)

are available in the git repository at:

  git://git.open-mesh.org/linux-merge.git tags/batadv-next-for-davem-20160518

for you to fetch changes up to ebe24cea95ab969f76f2922032f6c390fdc816f2:

  batman-adv: initialize ELP orig address on secondary interfaces (2016-05-18 11:49:44 +0800)

----------------------------------------------------------------
During the Wireless Battle Mesh v9 in Porto (PT) at the beginning of
May, we managed to uncover and fix some important bugs in our
new B.A.T.M.A.N. V algorithm. These are the fixes we came up with
together with others that I collected in the past weeks:
- avoid potential crash due to NULL pointer dereference in
  B.A.T.M.A.N. V routine when a neigh_ifinfo object is not found, by
  Sven Eckelmann
- avoid use-after-free of skb when counting outgoing bytes, by Florian
  Westphal
- fix neigh_ifinfo object reference counting imbalance when using
  B.A.T.M.A.N. V, by Sven Eckelmann. Such imbalance may lead to the
  impossibility of releasing the related netdev object on shutdown
- avoid invalid memory access in case of error while allocating
  bcast_own_sum when a new hard-interface is added, by Sven Eckelmann
- ensure originator address is updated in OMG/ELP packet content upon
  primary interface address change, by Antonio Quartulli
- fix integer overflow when computing TQ metric (B.A.T.M.A.N. IV), by
  Sven Eckelmann
- avoid race condition while adding new neigh_node which would result
  in having two objects mapping to the same physical neighbour, by
  Linus Lüssing
- ensure originator address is initialized in ELP packet content on
  secondary interfaces, by Marek Lindner

----------------------------------------------------------------
Antonio Quartulli (1):
      batman-adv: make sure ELP/OGM orig MAC is updated on address change

Florian Westphal (1):
      batman-adv: fix skb deref after free

Linus Lüssing (1):
      batman-adv: Avoid duplicate neigh_node additions

Marek Lindner (1):
      batman-adv: initialize ELP orig address on secondary interfaces

Sven Eckelmann (4):
      batman-adv: Avoid nullptr derefence in batadv_v_neigh_is_sob
      batman-adv: Fix refcnt leak in batadv_v_neigh_*
      batman-adv: Fix unexpected free of bcast_own on add_if error
      batman-adv: Fix integer overflow in batadv_iv_ogm_calc_tq

 net/batman-adv/bat_iv_ogm.c |  9 +++----
 net/batman-adv/bat_v.c      | 66 +++++++++++++++++++++++++++++++++++++++------
 net/batman-adv/bat_v_elp.c  | 31 ++++++++++++++-------
 net/batman-adv/bat_v_elp.h  |  2 ++
 net/batman-adv/originator.c |  6 +++--
 net/batman-adv/routing.c    |  4 ++-
 6 files changed, 93 insertions(+), 25 deletions(-)
</pre>

h2. update base patches after successful pull request

TODO
