h1. Basic Multicast Optimizations - Technical Description

Prior Readings:

 * [[Basic-multicast-optimizations|Basic Multicast Optimizations]]

h2. Multicast Listener Announcements

!{width: 66%25;}basic-multicast-listener-announce.png!

The IPv4/IPv6 multicast code in the Linux kernel keeps track of any of its applications requesting to receive multicast packets for a certain group.

batman-adv queries this local database and announces these so called multicast listeners, more precisely the according multicast MAC addresses, to the rest of the mesh network via the [[open-mesh:2012-05-13-translation-table-in-a-nutshell|translation table infrastructure]].

h2. Multicast TVLV

A node capable of performing Multicast Listener Announcements signalizes this by attaching a Multicast TVLV to its OGMs.

So far a node with a Linux bridge on top of its batman-adv interface is not capable of detecting and announcing multicast listeners behind its bridge. Therefore such nodes do not attach a Multicast TVLV to their OGMs.


h3. Multicast TVLV format

 * Definition:
<pre>
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   TVLV 0x06   |    Version    |             Length            | 
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 | MCAST Flags   |                 Reserved                      | 
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</pre>

h3. Multicast TVLV Flags

<pre>
 +-+-+-+-+-+-+-+-+
 |0|1|2|3|4|5|6|7|
 +-+-+-+-+-+-+-+-+
</pre>

h4. BATADV_MCAST_WANT_ALL_UNSNOOPABLES (Bit 0):

Signalizes that this node wants all unsnoopable multicast traffic, that is traffic destined to the all-nodes address for IPv6 (ff02::1) and to link-local addresses for IPv4 (224.0.0.0/24). This is usually the case when a node uses a bridge device on top of bat0 and is therefore unable to detect potential bridged-in listeners.

(not used by listeners yet, but implemented for senders already to ensure backwards compatibility later)

h4. BATADV_MCAST_WANT_ALL_IPV4 (Bit 1):

Signalizes that this node wants all IPv4 multicast traffic. This is usually the case when a node uses a bridge device on top of bat0, has an IGMP querier (no matter if IGMPv2 or IGMPv3) behind it and is therefore not able to reliably determine all of its IGMPv2 listeners.

(not used by listeners yet, but implemented for senders already to ensure backwards compatibility later)

h4. BATADV_MCAST_WANT_ALL_IPV6 (Bit 2):

Signalizes that this node wants all IPv6 multicast traffic. This is usually the case when a node uses a bridge device on top of bat0, has an MLD querier (no matter if MLDv1 or MLDv2) behind it and is therefore not able to reliably determine all of its MLDv1 listeners.

(not used by listeners yet, but implemented for senders already to ensure backwards compatibility later)

h4. Bits 3 to 7:

reserved for future extensions


h2. Multicast Sender

!{width: 66%25;}basic-multicast-sender-receiver.png!

A batman-adv node wanting to send a multicast frame needs to perform the following preliminary checks before applying any multicast optimizations:

 * Is this an IPv4 or IPv6 packet? Check the ethernet frame type
 * Does the frame have a multicast, non-broadcast destination? Check that the multicast bit in the destination MAC address in the ethernet frame is set and that the destination is not FF:FF:FF:FF:FF:FF
 * Do all other nodes have a Multicast TVLV?
 * Is the scope of the multicast destination IP address of scope link-local (IPv4: 224.0.0.0/24, IPv6: ffx2::/64)?
 * If the multicast destination IP is a link-local IPv4 (224.0.0.0/24) or the all-nodes IPv6 multicast (ff02::1) one, do all other nodes have the BATADV_MCAST_WANT_ALL_UNSNOOPABLES bit in their Multicast TVLV _unset_?

If all these checks pass then the number of nodes interested in this frame needs to be determined by:

 * Counting the matching TT entries
 * Counting the number of nodes having a BATADV_MCAST_WANT_ALL_IPV4 or BATADV_MCAST_WANT_ALL_IPV6 (depending on the frame type) flag in their Multicast TVLV set.

If the total count is...

 * ... 0, then this frame can be safely dropped.
 * ... 1, then this frame is encapsulated in and forwarded via a batman-adv unicast packet to the according destination.
 * > 1, then this frame is encapsulated in a batman-adv broadcast packet and forwarded via classic flooding to all nodes.


h2. Multicast TVLV flags â€“ Reasonings

h3. BATADV_MCAST_WANT_ALL_UNSNOOPABLES

For IP a host listening to certain multicast addresses announces these via ICMPv6-MLD (for IPv6) and/or IGMP (for IPv4) messages on a link:

!{width: 85%25;}basic-multicast-snoopables-announce.png!

However there are two exemptions to this:

!{width: 85%25;}basic-multicast-snoopables-unknown.png!

 * No MLD messages for the all-nodes IPv6 multicast (ff02::1) address. "RFC4541":https://tools.ietf.org/html/rfc4541, section 3:

> [...] The only exception is the address FF02::1 which is the all hosts link-scope address for which MLD messages are never sent. [...]

 * No requirement for IGMP messages for IPv4 link-local multicast addresses (224.0.0.x). "RFC4541":https://tools.ietf.org/html/rfc4541, section 2.1.2.2):

> [...] This recommendation is based on the fact that many host systems do not send Join IP multicast addresses in the [224.0.0.x] range before sending or listening to IP multicast packets. [...]

Instead of always flooding IPv4 link-local multicast and IPv6 all-nodes multicast traffic it was chosen to introduce this flag to allow performing multicast optimizations for these addresses too if no bridges are involved.

Although we are not supporting bridges yet (i.e. one bridge causes all other nodes to flood multicast traffic without any optimizations), the logic of this flag was implemented already to avoid a future compatibility break.

h3. BATADV_MCAST_WANT_ALL_IPV4 / BATADV_MCAST_WANT_ALL_IPV6