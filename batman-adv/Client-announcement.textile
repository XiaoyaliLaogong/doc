h1. Client-announcement

The code has not been released yet. For those interested in reviewing the code, the development branch is at http://git.open-mesh.org/?p=ordex/batman-adv.git;a=shortlog;h=refs/heads/hna-new

h2. Current Contstraints of client announcement

Up until recently, B.A.T.M.A.N.-Advanced was mostly used to build a mesh network and to allow communitcation between B.A.T.M.A.N.-Advanced nodes or a few hosts being bridged into the mesh through  certain nodes. However, the desire to also use B.A.T.M.A.N.-Advanced to interconnect a larger, common, wired LAN with Wifi access points for client devices into a single subnet has increased. 

The current implementation just adds the client mac addresses to the responsible nodes OGMs - so called HNAs (host network announcements) which has three constraints:
* A lot of overhead even when the HNAs do not change (the addresses are always attached).
* The amount of HNAs per OGM is quite limited and does not work when bridging larger LANs into the mesh cloud (frame size limit).
* It can take up to a couple of seconds for a node to roam and being recognised at its new position, depending on the link qualities. A unicast packet sent to the outdated orignator will just be dropped at this node.


h2. Concept Ideas

h3. How the announcement works

* Instead of adding all the client MAC addresses, the OGM packet format has been modified to include:
** a local translation table version number (TTVN);
** a set of local translation table changes which happened in the last OGM interval
* When a node local translation table changes at least once in a OGM interval (a client is added or removed), the TTVN is increased by one.
* If a node receives an OGM with a newer, higher ref.-ID, it updates its global translation table with the set of changes carried by the OGM.
** if an OGM has been missed (a is detected in the changes list), then the node must queries the originator for an update with a special unicast packet: TT-REQUEST
* Any node on the paths between the querier and the destination may decide to not forward the TT-REQUEST and directly answer. This is possible only if the node already has the needed changes. **This avoids a storm of unicast packets towards the destination after its local translation table changes.** Most of the times the request will stop on the first hop.

* Every node memorizes the last changeset announced within the OGM of each node in the network
* A TT-REQUEST can request a complete local table or just a the last sent changeset.

h4. Guaraneteeing consistency

To be sure to that a node has all the right information, an hash value of the local translation table is spread within the OGM. This value is called TT_CRC.

After applying a changeset, a node will recompute the TT_CRC for such originator's table. Later, when receving a new OGM, the node can evaluate whether the TT_CRC coindiceds with the one received with the message. In case of negative match the node will request a "full table" because something went wrong in its table operations.

The TT_CRC is also usefull in case of node reboot: the TTVN will restart from 0 generating a strange situation (new_ttvn less than last_ttvn), but the TT_CRC will ensure that the receiving node will not accept this scenario and will request a "full table" to refresh its table.

Notes:
A research project has been done on this topic and it will be linked on this page as soon as it get ready.