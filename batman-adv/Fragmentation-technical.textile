h1. Fragmentation

To transport packets through the mesh network, batman-adv prepends its own header to packets entering the mesh. Since clients and other sources of packet don't know about this additional header, packets are often optimized for the usual MTU of 1500 bytes, meaning that the additional header increases the size to e.g. 1528 bytes. To handle this, batman-adv recommends users to increase the MTU of the wireless interface to at least 1528 bytes. However, some drivers/hardware don't support an MTU larger than 1500 bytes, or batman-adv might need to transmit big protocol packets, and for this we need fragmentation.

h2. Protocol Header

The fragment header contains several fields:
* Batman-adv common header (Compatibility version, packet type, and time-to-live)
* Destination
   Used to route fragments if it wouldn't make sense to merge them. (E.g. when the merged packet larger than the intermediate MTU and thus would be fragmented again anyways.)
* Originator
   Used to group fragments in the buffer. This and the sequence number makes the original packet identifiable.
* Fragment number
   Used to sort the fragments before merging them.
* Sequence number
   Used to identify the group of fragments.
* Total size
   Used to determine whether a fragment should be merged before forwarding and also to determine if all fragments are received.

The first feature is fulfilled with two fields:
* Fragment number
  Used to order the fragments before merging them. The field is 4 bits, giving up to 16 fragments. The number of fragments is a trade between how big the original packet be, and the risk of loosing one or more fragments in the air.
* Total size
  The size of the original packet is used by the receiver to determine when the last fragment is received.

The second feature is supported by using encapsulation. This is done by using a header that is independent of the original packet. When a fragmented packet is merged, the original packet is handed to it corresponding handler as had it never been touched.

The third feature is supported bu including the 

h2. Creating Fragments

Any type of unicast packet (e.g. @struct unicast_packet@, @struct tt_response@, @struct vis_packet@, etc) can be fragmented.

!tx.png!

The size is checked in @send_skb_to_orig()@ and if larger than the MTU of the selected outgoing interface (selected by [[batman-adv:Multi-link-optimizations-technical|bonding]]) the packet is passed to @frag_send_packet()@. Here, fragments are created and sent from the tail of the original packet, so that the first fragment contains the end of the original packet:

!first_fragment.png!

The first fragment is passed to @send_skb_packet()@ to be transmitted and if the size of the remaining part of the original packet is also larger than the MTU, another fragment is created:

!second_fragment.png!

Now the remaining part is small enough to transmit in one piece, so the fragment header is added and the packet is passed to @send_skb_packet()@:

!third_fragment.png!

h2. Merging Fragments

h2. Configuration

h2. The TT Issue