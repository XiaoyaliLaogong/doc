<?xml version="1.0" encoding="UTF-8" ?>
<chapter id="batman_iv_tq">
<title>B.A.T.M.A.N. IV (TQ) Meshing</title>
<sect1 id="batman3">
<title>B.A.T.M.A.N. III (Introduction)</title>
<para>
	B.A.T.M.A.N. is a proactive routing protocol for Wireless Ad-hoc Mesh
	Networks, including (but not limited to) Mobile Ad-hoc Networks
	(MANETs).  The protocol proactively maintains information about the
	existence of all nodes in the mesh that are accessible via single-hop
	or multi-hop communication links.  The strategy of B.A.T.M.A.N. is to
	determine for each destination in the mesh one single-hop neighbor,
	which can be utilized as best gateway to communicate with the
	destination node.  In order to perform multi-hop IP-based routing,
	the routing table of a node must contain a link-local gateway for
	each host or network route.  To learn about the best next-hop for
	each destination is all that the B.A.T.M.A.N. algorithm cares about.
	There is no need to find out or calculate the complete route, which
	makes a very fast and efficient implementation possible.
</para>

<sect2 id="how_works">
<title>B.A.T.M.A.N. III (Brief Overview)</title>
<para>
	On a regular basis every B.A.T.M.A.N. node broadcasts an originator
	message (or OGM), thereby informing its link-local neighbors about
	its existence (first step).  Link-local neighbors which are receiving the
	Originator messages are relaying them by rebroadcasting it, according
	to specific B.A.T.M.A.N. forwarding rules.  The B.A.T.M.A.N. mesh
	network is therefore flooded with Originator messages.  This flooding
	process will be performed by single-hop neighbors in the second step,
	by two-hop neighbors in the third step, and so forth.  OGMs are send
	and repeated as UDP broadcasts, therefore OGMs are flooded until
	every node has received it at least once, or until they got lost due
	to packet loss of communication links, or until their TTL (time to
	live) value has expired.  In practise OGM packet loss caused by
	interference, collision or congestion is significant.  The number of
	OGMs received from a given Originator via each link-local neighbor is
	used to estimate the quality of a (single-hop or multi-hop) route.
	In order to be able to find the best route to a certain originator,
	B.A.T.M.A.N counts the originator-messages received and logs which
	link-local neighbor relayed the message.  Using this information
	B.A.T.M.A.N. maintains a table with the best link-local router
	towards every originator on the network. Unlike wired networks, WiFi
	setups often face the problem of asymetric links (Node A has a better
	connection towards Node B than vice versa). To ensure that the detected
	connections allow communication in both directions each B.A.T.M.A.N.
	node awaits rebroadcasts of its own OGMs from his neighbors within a
	certain timeframe (bidirectional link check). If the OGMs are not
	successfully retransmitted the connection is considered too asymetric
	(unusable) and therefore ignored.
</para>
</sect2>
</sect1>

<sect1 id="batman4">
<title>B.A.T.M.A.N. IV (TQ)</title>
<para>
	The B.A.T.M.A.N. III algorithm has serious problems when it comes to asymetric links. The bidirectional link check tries to limit its impact but the result is far from being perfect. The timeframe in which B.A.T.M.A.N. accepts his own OGMs being rebroadcasted by its neighbor allows to tweak the behaviour. If this timeframe is rather short B.A.T.M.A.N. is very strict on choosing links. This may lead to many ignored links which might be usable in one direction. Only symetric connections will be considered. If the timeframe value is less strict B.A.T.M.A.N. will accept more links but tends to route in the wrong direction.
</para>
<para>
	Example: OGMs from Node A propagate to B. The link is asymetric, therefore B receives all packets from A in contrast to A which receives almost nothing from B. As all the packets from A get to B the packet count at B's side goes up. B will assume that it has a perfect link towards A which is not the case.
<inlinemediaobject>
	<imageobject> <imagedata fileref="images/asymetry.eps" format="EPS"  scale="50"/> </imageobject>
	<imageobject> <imagedata fileref="images/asymetry.png" format="PNG"  /> </imageobject>
	<textobject> <phrase>asymetry illustration</phrase> </textobject>
</inlinemediaobject>
</para>
<para>
	To overcome this flaw B.A.T.M.A.N. IV has been enhanced with the Transmit Quality (TQ) algorithm. The following sections are going to outline its design and how it strengthens B.A.T.M.A.N.'s routing capabilities in asymetric environments.
</para>
<sect2 id="batman4_packet_layout">
<title>The B.A.T.M.A.N. IV Originator Message Format</title>
<para>
	<table>
		<title>B.A.T.M.A.N. IV (Layer 3) Packet Format</title>
		<tgroup cols="5">
			<colspec colnum="1" colname="colB" colwidth="1*"/>
			<colspec colnum="2" colname="col0" colwidth="1*"/>
			<colspec colnum="3" colname="col1" colwidth="1*"/>
			<colspec colnum="4" colname="col2" colwidth="1*"/>
			<colspec colnum="5" colname="col3" colwidth="1*"/>
			<thead>
				<row>
					<entry>+</entry>
					<entry>00</entry>
					<entry>01</entry>
					<entry>02</entry>
					<entry>03</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry colname="colB">00-03</entry>
					<entry namest="col0" nameend="col0">Version</entry>
					<entry namest="col1" nameend="col1">Flags</entry>
					<entry namest="col2" nameend="col2">TTL</entry>
					<entry namest="col3" nameend="col3">GW Flags</entry>
				</row>
				<row>
					<entry colname="colB">04-07</entry>
					<entry namest="col0" nameend="col1">Seqence Number</entry>
					<entry namest="col2" nameend="col3">GW Port</entry>
				</row>
				<row>
					<entry colname="colB">08-11</entry>
					<entry namest="col0" nameend="col3">Originator Address</entry>
				</row>
				<row>
					<entry colname="colB">11-15</entry>
					<entry namest="col0" nameend="col3">Previous Sender Address</entry>
				</row>
				<row>
					<entry colname="colB">16-19</entry>
					<entry namest="col0" nameend="col0">TQ</entry>
					<entry namest="col1" nameend="col1">HNA length</entry>
					<entry namest="col2" nameend="col3"> (...)</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
</para>
</sect2>
<sect2 id="batman4_tq">
<title>The Transmit Quality</title>
<para>
	B.A.T.M.A.N. IV divides a given link quality into 2 distinct parts: receiving link quality and transmit link quality. The receiving link quality expresses the probability of a successful packet transmission towards the node. The transmit link quality describes the probability of a successful transmission towards a neighbor node. Obviously, B.A.T.M.A.N. is more interested in the transmit link quality as the receiving link quality can't be used to influence the routing decision.
</para>
<para>
	As explained in the previous section the packet counting floods the network with receiving link quality rather than transmit link quality. On the link-local level the transmit link quality can be derived from the receiving link quality by applying some calculations on the packet count.
</para>
<para>
	<orderedlist>
		<listitem>
			<para>
				B.A.T.M.A.N. knows the receiving link quality (RQ) by counting the packets of its neighbors.
			</para>
			<para>
				<inlinemediaobject>
					<imageobject> <imagedata fileref="images/rq.eps" format="EPS" scale="50" /> </imageobject>
					<imageobject> <imagedata fileref="images/rq.png" format="PNG"  /> </imageobject>
					<textobject> <phrase>Receive Quality (RQ)</phrase> </textobject>
				</inlinemediaobject>
			</para>
		</listitem>
		<listitem>
			<para>
				B.A.T.M.A.N. knows the echo link quality (EQ) by counting rebroadcasts of its own OGMs from his neighbors.
			</para>
			<para>
				<inlinemediaobject>
					<imageobject> <imagedata fileref="images/eq_alt1.eps" format="EPS" scale="50" /> </imageobject>
					<imageobject> <imagedata fileref="images/eq_alt1.png" format="PNG"  /> </imageobject>
					<textobject> <phrase>Echo Link Quality (EQ)</phrase> </textobject>
				</inlinemediaobject>
			</para>
		</listitem>
		<listitem>
			<para>
				B.A.T.M.A.N. can calculate the transmit link quality (TQ) by dividing the echo link quality by the receiving link quality.
			</para>
			<para>
				<inlinemediaobject>
					<imageobject> <imagedata fileref="images/tq.eps" format="EPS" scale="50" /> </imageobject>
					<imageobject> <imagedata fileref="images/tq.png" format="PNG"  /> </imageobject>
					<textobject> <phrase>Transmit Link Quality (TQ)</phrase> </textobject>
				</inlinemediaobject>
			</para>
			<para>
				<inlinemediaobject>
					<imageobject> <imagedata fileref="images/compute_tq.eps" format="EPS"/> </imageobject>
					<imageobject> <imagedata fileref="images/compute_tq.png" format="PNG"  /> </imageobject>
					<textobject> <phrase>compute the Transmit Link Quality</phrase> </textobject>
				</inlinemediaobject>
			</para>
		</listitem>
	</orderedlist>
</para>
<para>
	This shows that B.A.T.M.A.N. IV is able to compute the local Transmit Quality by using the same
	mechanisms as B.A.T.M.A.N. III without adding further overhead.
</para>
</sect2>
<sect2 id="batman4_tq_prop">
<title>Transmit Quality Propagation</title>
<para>
	The local link quality needs to be propagated throughout the network to inform other nodes about the transmit quality. Therefore B.A.TM.A.N. IV introduces a new field called "TQ" which is 1 byte long. This field is added to the known B.A.T.M.A.N. III packet. Whenever the OGM is generated this field is set to maximum length (255) before it is broadcasted. The receiving neighbor will calculate their own local link quality into the received TQ value and rebroadcast the packet. Hence, every node receiving a packet knows about the transmit quality towards the originator node.
</para>
<para>
	To add the local link quality in the TQ value the following calculation is performed:
</para>
<para>
	<inlinemediaobject>
		<imageobject> <imagedata fileref="images/tq_prop_calc.eps" format="EPS" /> </imageobject>
		<imageobject> <imagedata fileref="images/tq_prop_calc.png" format="PNG" /> </imageobject>
		<textobject> <phrase>TQ calcuation</phrase> </textobject>
	</inlinemediaobject>
</para>
<para>
	Example: Node A broadcasts the packet with TQ max. Node B receives it, applies the TQ calculation and rebroadcasts it. When node C gets the packet it knows about the transmit quality towards node A.
</para>
<para>
	<inlinemediaobject>
		<imageobject> <imagedata fileref="images/tq_prop.eps" format="EPS" scale="40" /> </imageobject>
		<imageobject> <imagedata fileref="images/tq_prop.png" format="PNG"  /> </imageobject>
		<textobject> <phrase>TQ propagation</phrase> </textobject>
	</inlinemediaobject>
</para>
<para>
	B.A.T.M.A.N. IV can not always rebroadcast the newly calculated TQ that came with the latest OGM. Instead the TQ that was received via the best neighbor is rebroadcasted to support asymetric link scenarios better.
</para>
<para>
	Example: Node A and B are neighbors. Node A has a good connection towards node B but not vice versa. The node C has a good connection towards node A and a bad connection back, and C has a good receiving link quality and bad sending quality towards B. </para>
<para>
	<inlinemediaobject>
		<imageobject> <imagedata fileref="images/tq_prop_best1.eps" format="EPS" scale="40" /> </imageobject>
		<imageobject> <imagedata fileref="images/tq_prop_best1.png" format="PNG"  /> </imageobject>
		<textobject> <phrase>TQ propagation - example topology</phrase> </textobject>
	</inlinemediaobject>
</para>
<para>
	Due to this layout the originator messages from node A have a good chance arriving at B but the TQ value propagated by node B is very low due to the high packet loss towards node A. The messages from node A that travel via node C have a low probability arriving at node B due to the packet loss towards node B but have a much better TQ value. Node B will propagate many messages with a low TQ value (received from node A directly) and a few messages with a high TQ value (received from node A via node C) although the connection towards node A is very good.
</para>
<para>
	<inlinemediaobject>
		<imageobject> <imagedata fileref="images/tq_prop_best2.eps" format="EPS" scale="40" /> </imageobject>
		<imageobject> <imagedata fileref="images/tq_prop_best2.png" format="PNG"  /> </imageobject>
		<textobject> <phrase>TQ propagation - different paths for the OGM</phrase> </textobject>
	</inlinemediaobject>
</para>

<para>
	Therefore, B.A.T.M.A.N. IV will rebroadcast the received OGM with the TQ value of the best neighbor towards the originator. In the given example node B will place the TQ value received via node C in the message from node A before rebroadcasting it. It will flood its best TQ only.
</para>
<para>
	<inlinemediaobject>
		<imageobject> <imagedata fileref="images/tq_prop_best3.eps" format="EPS" scale="40" /> </imageobject>
		<imageobject> <imagedata fileref="images/tq_prop_best3.png" format="PNG"  /> </imageobject>
		<textobject> <phrase>TQ propagation - only the best path is propagated</phrase> </textobject>
	</inlinemediaobject>
</para>

</sect2>

<sect2 id="batman4_local_global_tq">
<title>Local TQ vs Global TQ</title>
<para>
	A B.A.T.M.A.N. IV node has to keep track of 2 different TQ values:
	<orderedlist>
		<listitem><para>The local TQ which represents the transmit quality towards every single hop neighbor (retrieved via the packet count plus TQ calculation).</para></listitem>
		<listitem><para>The global link quality which describes the link quality towards every multi hop neighbor (received via B.A.T.M.A.N. IV packets).</para></listitem>
	</orderedlist>
</para>
<para>
	The calculation for the local TQ needs the OGM packet count of the neigbor and the own OGM packet count rebroadcasted by that very neighbor. Therefore a B.A.T.M.A.N. node has keep track of received packets over a certain interval. The slinding window size of these statistics is called TQ_LOCAL_WINDOW_SIZE.
</para>
<para>
	The global TQ is an average of all received TQ values from one originator via a distinct neighbor. Packets with a TQ value of 0 also count as non-received packets. B.A.T.M.A.N. IV uses the sliding window size TQ_GLOBAL_WINDOW_SIZE greater than 1 to average the TQ.
</para>
</sect2>

<sect2 id="batman4_tq_asymetry">
<title>Handling Asymetric Links</title>
<para>
	Although the transmit link quality is most important decision factor B.A.T.M.A.N. IV also keeps track of the receiving link quality. On the WiFi layer every unicast packet has to be acknowledged by the neighbor node to approve the transmission. If this neighbor is not able to sucessfully send his ACKs the WiFi layer considers this transmission to be failed and tries to retransmit until it gives up.
</para>
<para>
	<inlinemediaobject>
		<imageobject> <imagedata fileref="images/asym_link1.eps" format="EPS" scale="50" /> </imageobject>
		<imageobject> <imagedata fileref="images/asym_link1.png" format="PNG" scale="50" /> </imageobject>
		<textobject> <phrase>Asymetry situation without asymetry penalty</phrase> </textobject>
	</inlinemediaobject>
</para>
<para>
	Thus B.A.T.M.A.N. IV needs to penalize links that have have a poor receiving link quality. To avoid a simple hysteresis which completely turns on or off a link B.A.T.M.A.N. IV uses a mathematical function to give the receiving link quality stronger negative impact the weaker the link becomes.
</para>
<para>
	<inlinemediaobject>
		<imageobject> <imagedata fileref="images/asym_penalty.eps" format="EPS"  /> </imageobject>
		<imageobject> <imagedata fileref="images/asym_penalty.png" format="PNG"  /> </imageobject>
		<textobject> <phrase>graph for asymetry penalty</phrase> </textobject>
	</inlinemediaobject>
</para>
<para>
	This obtained value is calculated into the TQ before it gets rebroadcasted. Neighboring nodes can weight the routing decision based on this information. In some situations the weak link is the only link available, so you want to use it, whereas in other cases better connections may exist.
</para>
<para>
	<inlinemediaobject>
		<imageobject> <imagedata fileref="images/asym_link2.eps" format="EPS" scale="50" /> </imageobject>
		<imageobject> <imagedata fileref="images/asym_link2.png" format="PNG"  /> </imageobject>
		<textobject> <phrase>Asymetry situation with applied asymetry penalty</phrase> </textobject>
	</inlinemediaobject>
</para>
</sect2>

<sect2 id="batman4_tq_echo_cancellation">
<title>Echo Cancellation</title>
<para>
	B.A.T.M.A.N. IV loosens the strict packet drop policy used by B.A.T.M.A.N. III to make the TQ algorithm work. B.A.T.M.A.N. IV checks for unknown sequence numbers via a specific neighbor whereas B.A.T.M.A.N. III checks for known sequence numbers. If this combination is "new" the OGM will be accepted, processed and rebroadcasted. This may duplicate known information when the message "comes back" due to rebroadcasting (so called echos). In dense areas without heavy packet loss this leads to increased bandwidth and CPU usage.
</para>
<para>
	Example: 3 nodes (A, B and C) in a row (A can hear B but not C). Node A emits an OGM, Node B hears and rebroadcasts it. The broadcast from node B arrives at A and C. Node A will drop the message as A detects that it was the originator of this OGM. C will process and rebroadcasts the message. Node B will receive the very OGM that it sent before and happily rebroadcast again (the echo of its own message) because B can't detect that it broadcasted the message before.
</para>
<para>
	<inlinemediaobject>
		<imageobject> <imagedata fileref="images/echo_cancel1.eps" format="EPS" scale="50" /> </imageobject>
		<imageobject> <imagedata fileref="images/echo_cancel1.png" format="PNG"  /> </imageobject>
		<textobject> <phrase>communication without echo cancellation</phrase> </textobject>
	</inlinemediaobject>
</para>
<para>
	To detect echos (messages that already passed through a node) B.A.T.M.A.N. IV introduces a new protocol field called "previous sender" which contains the IP address of the node rebroadcasting the OGM. Whenever a node receives a message from a neighbor it will fill the "previous sender" field with the address of the sending neighbor before rebroadcasting it. If a node detects his own IP address in the "previous sender" field the packet will be ignored.
</para>
<para>
	Back to the example: Node B will ignore (drop) the packet coming back from node C as node C wrote the IP address of node B in the "previous sender" field.
</para>
<para>
	<inlinemediaobject>
		<imageobject> <imagedata fileref="images/echo_cancel2.eps" format="EPS" scale="50" /> </imageobject>
		<imageobject> <imagedata fileref="images/echo_cancel2.png" format="PNG"  /> </imageobject>
		<textobject> <phrase>communication with echo cancellation</phrase> </textobject>
	</inlinemediaobject>
</para>
<para>
	Even in more sophisticated scenarios with more nodes/hops this concept successfully reduces the packets. It ensures that packet only travels paths which did not see this OGM before.
</para>
<para>
	In certain cases B.A.T.M.A.N. IV is unable to detect the 'real' source of an OGM which may lead to temporary routing loops. The following section is going to illustrate the issue and how the echo cancellation addresses it using an Ethernet network as example for the sake of simplicity. WiFi and other mediums are less susceptible as Ethernet but still affected.
</para>
<para>
	Example: The node S (source) has a WiFi connection towards node A but no link to node B at all. Node A and node B are connected via Ethernet. We assume the Ethernet connection to be perfect (no packet loss) whereas the WiFi connection suffers from occasional collisions and interferences.
</para>
<para>
	<inlinemediaobject>
		<imageobject> <imagedata fileref="images/hop_penalty3.eps" format="EPS" scale="50" /> </imageobject>
		<imageobject> <imagedata fileref="images/hop_penalty3.png" format="PNG"  /> </imageobject>
		<textobject> <phrase>example topology</phrase> </textobject>
	</inlinemediaobject>
</para>
<para>
	Whenever node A receives a packet via the WiFi connection it will rebroadcast the information on the Ethernet to inform neighbor nodes about the existance of the source node. Node B receives the broadcast and parses the packet before rebroadcasting it. At that point node A will receive that very packet again.
</para>
<para>
	<inlinemediaobject>
		<imageobject> <imagedata fileref="images/hop_penalty4.eps" format="EPS" scale="50" /> </imageobject>
		<imageobject> <imagedata fileref="images/hop_penalty4.png" format="PNG"  /> </imageobject>
		<textobject> <phrase>packet hops</phrase> </textobject>
	</inlinemediaobject>
</para>
<para>
	B.A.T.M.A.N. III would have dropped the packet at this point. It has a duplicate packet detection based on sequence numbers only. The sequence number is known, hence the packet dropped (the fastest packet wins). In asymetric environments this may lead to suboptimal routing decisions. Therefore B.A.T.M.A.N. IV interprets the arrival of this packet as second path towards the originator. This path transmits the packet slower (due to more hops for example) but but may offer a better transmit quality. Duplicate sequence numbers are dropped if they arrive via the same neighbor.
</para>
<para>
	On a lossy medium the TQ value is decreased while travelling from hop to hop (see asymetric link handling). The Ethernet connection does not suffer from packet loss which results in not decreasing the TQ value at all. Node A has 2 possible routes towards the originator: The node S itself and node B (both will advertise the same TQ value).
</para>
<para>
	<inlinemediaobject>
		<imageobject> <imagedata fileref="images/hop_penalty5.eps" format="EPS" scale="50" /> </imageobject>
		<imageobject> <imagedata fileref="images/hop_penalty5.png" format="PNG"  /> </imageobject>
		<textobject> <phrase>route candidates</phrase> </textobject>
	</inlinemediaobject>
</para>
<para>
	As B.A.T.M.A.N. IV values TQ and fastest packet the node A's route will point towards the node S. Once the WiFi link quality drops (for a few moments due to some collisions) the TQ value from the node S will drop. At that point the B.A.T.M.A.N. IV node A will change its route towards node B which offers a better TQ value. Node A and node B will send packets forth and back in a loop.
</para>
<para>
	<inlinemediaobject>
		<imageobject> <imagedata fileref="images/hop_penalty6.eps" format="EPS" scale="50" /> </imageobject>
		<imageobject> <imagedata fileref="images/hop_penalty6.png" format="PNG"  /> </imageobject>
		<textobject> <phrase>applied hop penalty</phrase> </textobject>
	</inlinemediaobject>

</para>
</sect2>

<sect2 id="batman4_tq_hop_penalty">
<title>Hop Penalty</title>
<para>
	So far, B.A.T.M.A.N. IV focusses only on the link quality to evaluate paths but not on the number of hops in the path as it is unaware of the topology beyond its horizon. In certain network setups the link quality of the neighbors is very similar whereas the number of hops is not. In these scenarios it is very desirable to choose the shortest path to reduce latency and to safe bandwidth (on wireless mediums). The following section is going to illustrate the issue and how it is going to be addressed using an Ethernet network as example for the sake of simplicity. WiFi and other mediums are less susceptible as Ethernet but still affected.
</para>
<para>
	Example: The nodes A, B and C that are connected to a network switch. Node A originates the first message which is received, processed and rebroadcasted by B immediately. Lets assume the rebroadcast from node B arrives at node C before the message from node A arrives. As the link quality is the same and perfect (in this example) Node C assumes a path towards node A via node B. [penalty1 bild]
</para>
<para>
	To overcome this issue B.A.T.M.A.N. IV introduces a hop penalty: Every time an OGM passes a node the TQ value will be decreased by a fixed value regardless of the asymetric link penalty before rebroadcasting the packet. In the given example it decrease the value of the route via node B and favors the direct connection. [penalty2 bild]
</para>
</sect2>

<sect2 id="batman4_packet_aggregation">
<title>Packet Aggregation</title>
<para>
	In dense node areas with low packet loss B.A.T.M.A.N. III generates quite some packets which increases the probability of collisions, wastes air time and causes more CPU load. Each OGM being 20 Bytes small, B.A.T.M.A.N. IV introduces a packet aggregation that combines several distinct OGMs into one packet. To achieve this B.A.T.M.A.N. IV holds back packets that are to be sent and waits for incoming packets to append them before broadcasting the single aggregated packet.
</para>
<para>
	Every OGM consists of the static B.A.T.M.A.N. IV header (see: originator message format) plus the dynamic HNA message part.
</para>
<para>
	<table>
		<title>HNA (Layer 3) Message Format</title>
		<tgroup cols="5">
			<colspec colnum="1" colname="colB" colwidth="1*"/>
			<colspec colnum="2" colname="col0" colwidth="1*"/>
			<colspec colnum="3" colname="col1" colwidth="1*"/>
			<colspec colnum="4" colname="col2" colwidth="1*"/>
			<colspec colnum="5" colname="col3" colwidth="1*"/>
			<thead>
				<row>
					<entry>+</entry>
					<entry>00</entry>
					<entry>01</entry>
					<entry>02</entry>
					<entry>03</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry colname="colB">00-03</entry>
					<entry namest="col0" nameend="col3">HNA address</entry>
				</row>
				<row>
					<entry colname="colB">04-07</entry>
					<entry namest="col0" nameend="col0">Subnetmask</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
</para>
<para>
	B.A.T.M.A.N. IV allows to append none, one or multiple HNA messages. As each OGM may carry multiple HNA information it is necessary to store the number of HNA messages in the newly created HNA length field.
</para>
<para>
	<table>
		<title>Example B.A.T.M.A.N. IV (Layer 3) Aggregated Packet</title>
		<tgroup cols="5">
			<colspec colnum="1" colname="colB" colwidth="1*"/>
			<colspec colnum="2" colname="col0" colwidth="1*"/>
			<colspec colnum="3" colname="col1" colwidth="1*"/>
			<colspec colnum="4" colname="col2" colwidth="1*"/>
			<colspec colnum="5" colname="col3" colwidth="1*"/>
			<thead>
				<row>
					<entry>+</entry>
					<entry>00</entry>
					<entry>01</entry>
					<entry>02</entry>
					<entry>03</entry>
				</row>
			</thead>
			<tbody>
				<row>
					<entry colname="colB">00-03</entry>
					<entry namest="col0" nameend="col0">Version</entry>
					<entry namest="col1" nameend="col1">Flags</entry>
					<entry namest="col2" nameend="col2">TTL</entry>
					<entry namest="col3" nameend="col3">GW Flags</entry>
				</row>
				<row>
					<entry colname="colB">04-07</entry>
					<entry namest="col0" nameend="col1">Seqence Number</entry>
					<entry namest="col2" nameend="col3">GW Port</entry>
				</row>
				<row>
					<entry colname="colB">08-11</entry>
					<entry namest="col0" nameend="col3">Originator Address</entry>
				</row>
				<row>
					<entry colname="colB">11-15</entry>
					<entry namest="col0" nameend="col3">Previous Sender Address</entry>
				</row>
				<row>
					<entry colname="colB">16-19</entry>
					<entry namest="col0" nameend="col0">TQ</entry>
					<entry namest="col1" nameend="col1">HNA length = 2</entry>
					<entry namest="col2" nameend="col3">HNA address #1</entry>
				</row>
				<row>
					<entry colname="colB">20-23</entry>
					<entry namest="col0" nameend="col1">HNA address #1 (continued)</entry>
					<entry namest="col2" nameend="col2">Subnetmask #1</entry>
					<entry namest="col3" nameend="col3">HNA address #2 </entry>
				</row>
				<row>
					<entry colname="colB">24-27</entry>
					<entry namest="col0" nameend="col2">HNA address #2 (continued)</entry>
					<entry namest="col3" nameend="col3">Subnetmask #2 </entry>
				</row>
				<row>
					<entry colname="colB">28-31</entry>
					<entry namest="col0" nameend="col3">next B.A.T.M.A.N. IV header</entry>
				</row>
			</tbody>
		</tgroup>
	</table>
</para>
</sect2>

 <sect2 id="multiple_interfaces">
<title>Multiple Interfaces</title>
<para>
TODO Explain multiple interfaces, which interface sends which OGM by which TTL, and why.
(Maybe move this section somewhere else ... )

==> why explaining this in this document ? I would refer them to the RFC because this did not change with IV.
 </para>
</sect2>

</sect1>
</chapter>
